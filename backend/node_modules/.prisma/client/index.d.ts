
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model HealthCheck
 * 
 */
export type HealthCheck = $Result.DefaultSelection<Prisma.$HealthCheckPayload>
/**
 * Model HealthCheckResult
 * 
 */
export type HealthCheckResult = $Result.DefaultSelection<Prisma.$HealthCheckResultPayload>
/**
 * Model Incident
 * 
 */
export type Incident = $Result.DefaultSelection<Prisma.$IncidentPayload>
/**
 * Model IncidentEvent
 * 
 */
export type IncidentEvent = $Result.DefaultSelection<Prisma.$IncidentEventPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model EmailConfig
 * 
 */
export type EmailConfig = $Result.DefaultSelection<Prisma.$EmailConfigPayload>
/**
 * Model SlackConfig
 * 
 */
export type SlackConfig = $Result.DefaultSelection<Prisma.$SlackConfigPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more HealthChecks
 * const healthChecks = await prisma.healthCheck.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more HealthChecks
   * const healthChecks = await prisma.healthCheck.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.healthCheck`: Exposes CRUD operations for the **HealthCheck** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthChecks
    * const healthChecks = await prisma.healthCheck.findMany()
    * ```
    */
  get healthCheck(): Prisma.HealthCheckDelegate<ExtArgs>;

  /**
   * `prisma.healthCheckResult`: Exposes CRUD operations for the **HealthCheckResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthCheckResults
    * const healthCheckResults = await prisma.healthCheckResult.findMany()
    * ```
    */
  get healthCheckResult(): Prisma.HealthCheckResultDelegate<ExtArgs>;

  /**
   * `prisma.incident`: Exposes CRUD operations for the **Incident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Incidents
    * const incidents = await prisma.incident.findMany()
    * ```
    */
  get incident(): Prisma.IncidentDelegate<ExtArgs>;

  /**
   * `prisma.incidentEvent`: Exposes CRUD operations for the **IncidentEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IncidentEvents
    * const incidentEvents = await prisma.incidentEvent.findMany()
    * ```
    */
  get incidentEvent(): Prisma.IncidentEventDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;

  /**
   * `prisma.emailConfig`: Exposes CRUD operations for the **EmailConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailConfigs
    * const emailConfigs = await prisma.emailConfig.findMany()
    * ```
    */
  get emailConfig(): Prisma.EmailConfigDelegate<ExtArgs>;

  /**
   * `prisma.slackConfig`: Exposes CRUD operations for the **SlackConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SlackConfigs
    * const slackConfigs = await prisma.slackConfig.findMany()
    * ```
    */
  get slackConfig(): Prisma.SlackConfigDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    HealthCheck: 'HealthCheck',
    HealthCheckResult: 'HealthCheckResult',
    Incident: 'Incident',
    IncidentEvent: 'IncidentEvent',
    Notification: 'Notification',
    Setting: 'Setting',
    EmailConfig: 'EmailConfig',
    SlackConfig: 'SlackConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "healthCheck" | "healthCheckResult" | "incident" | "incidentEvent" | "notification" | "setting" | "emailConfig" | "slackConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      HealthCheck: {
        payload: Prisma.$HealthCheckPayload<ExtArgs>
        fields: Prisma.HealthCheckFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthCheckFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthCheckFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          findFirst: {
            args: Prisma.HealthCheckFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthCheckFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          findMany: {
            args: Prisma.HealthCheckFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>[]
          }
          create: {
            args: Prisma.HealthCheckCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          createMany: {
            args: Prisma.HealthCheckCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HealthCheckCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>[]
          }
          delete: {
            args: Prisma.HealthCheckDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          update: {
            args: Prisma.HealthCheckUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          deleteMany: {
            args: Prisma.HealthCheckDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthCheckUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HealthCheckUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckPayload>
          }
          aggregate: {
            args: Prisma.HealthCheckAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthCheck>
          }
          groupBy: {
            args: Prisma.HealthCheckGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthCheckGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthCheckCountArgs<ExtArgs>
            result: $Utils.Optional<HealthCheckCountAggregateOutputType> | number
          }
        }
      }
      HealthCheckResult: {
        payload: Prisma.$HealthCheckResultPayload<ExtArgs>
        fields: Prisma.HealthCheckResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthCheckResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthCheckResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          findFirst: {
            args: Prisma.HealthCheckResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthCheckResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          findMany: {
            args: Prisma.HealthCheckResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>[]
          }
          create: {
            args: Prisma.HealthCheckResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          createMany: {
            args: Prisma.HealthCheckResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HealthCheckResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>[]
          }
          delete: {
            args: Prisma.HealthCheckResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          update: {
            args: Prisma.HealthCheckResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          deleteMany: {
            args: Prisma.HealthCheckResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthCheckResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HealthCheckResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthCheckResultPayload>
          }
          aggregate: {
            args: Prisma.HealthCheckResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthCheckResult>
          }
          groupBy: {
            args: Prisma.HealthCheckResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthCheckResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthCheckResultCountArgs<ExtArgs>
            result: $Utils.Optional<HealthCheckResultCountAggregateOutputType> | number
          }
        }
      }
      Incident: {
        payload: Prisma.$IncidentPayload<ExtArgs>
        fields: Prisma.IncidentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IncidentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IncidentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          findFirst: {
            args: Prisma.IncidentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IncidentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          findMany: {
            args: Prisma.IncidentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>[]
          }
          create: {
            args: Prisma.IncidentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          createMany: {
            args: Prisma.IncidentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IncidentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>[]
          }
          delete: {
            args: Prisma.IncidentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          update: {
            args: Prisma.IncidentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          deleteMany: {
            args: Prisma.IncidentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IncidentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IncidentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentPayload>
          }
          aggregate: {
            args: Prisma.IncidentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncident>
          }
          groupBy: {
            args: Prisma.IncidentGroupByArgs<ExtArgs>
            result: $Utils.Optional<IncidentGroupByOutputType>[]
          }
          count: {
            args: Prisma.IncidentCountArgs<ExtArgs>
            result: $Utils.Optional<IncidentCountAggregateOutputType> | number
          }
        }
      }
      IncidentEvent: {
        payload: Prisma.$IncidentEventPayload<ExtArgs>
        fields: Prisma.IncidentEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IncidentEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IncidentEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          findFirst: {
            args: Prisma.IncidentEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IncidentEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          findMany: {
            args: Prisma.IncidentEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>[]
          }
          create: {
            args: Prisma.IncidentEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          createMany: {
            args: Prisma.IncidentEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IncidentEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>[]
          }
          delete: {
            args: Prisma.IncidentEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          update: {
            args: Prisma.IncidentEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          deleteMany: {
            args: Prisma.IncidentEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IncidentEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IncidentEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IncidentEventPayload>
          }
          aggregate: {
            args: Prisma.IncidentEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncidentEvent>
          }
          groupBy: {
            args: Prisma.IncidentEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<IncidentEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.IncidentEventCountArgs<ExtArgs>
            result: $Utils.Optional<IncidentEventCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      EmailConfig: {
        payload: Prisma.$EmailConfigPayload<ExtArgs>
        fields: Prisma.EmailConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          findFirst: {
            args: Prisma.EmailConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          findMany: {
            args: Prisma.EmailConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>[]
          }
          create: {
            args: Prisma.EmailConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          createMany: {
            args: Prisma.EmailConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>[]
          }
          delete: {
            args: Prisma.EmailConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          update: {
            args: Prisma.EmailConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          deleteMany: {
            args: Prisma.EmailConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailConfigPayload>
          }
          aggregate: {
            args: Prisma.EmailConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailConfig>
          }
          groupBy: {
            args: Prisma.EmailConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailConfigCountArgs<ExtArgs>
            result: $Utils.Optional<EmailConfigCountAggregateOutputType> | number
          }
        }
      }
      SlackConfig: {
        payload: Prisma.$SlackConfigPayload<ExtArgs>
        fields: Prisma.SlackConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SlackConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SlackConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          findFirst: {
            args: Prisma.SlackConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SlackConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          findMany: {
            args: Prisma.SlackConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>[]
          }
          create: {
            args: Prisma.SlackConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          createMany: {
            args: Prisma.SlackConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SlackConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>[]
          }
          delete: {
            args: Prisma.SlackConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          update: {
            args: Prisma.SlackConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          deleteMany: {
            args: Prisma.SlackConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SlackConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SlackConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlackConfigPayload>
          }
          aggregate: {
            args: Prisma.SlackConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSlackConfig>
          }
          groupBy: {
            args: Prisma.SlackConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SlackConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SlackConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SlackConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HealthCheckCountOutputType
   */

  export type HealthCheckCountOutputType = {
    results: number
    incidents: number
  }

  export type HealthCheckCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    results?: boolean | HealthCheckCountOutputTypeCountResultsArgs
    incidents?: boolean | HealthCheckCountOutputTypeCountIncidentsArgs
  }

  // Custom InputTypes
  /**
   * HealthCheckCountOutputType without action
   */
  export type HealthCheckCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckCountOutputType
     */
    select?: HealthCheckCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HealthCheckCountOutputType without action
   */
  export type HealthCheckCountOutputTypeCountResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthCheckResultWhereInput
  }

  /**
   * HealthCheckCountOutputType without action
   */
  export type HealthCheckCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
  }


  /**
   * Count Type IncidentCountOutputType
   */

  export type IncidentCountOutputType = {
    events: number
  }

  export type IncidentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | IncidentCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * IncidentCountOutputType without action
   */
  export type IncidentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentCountOutputType
     */
    select?: IncidentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IncidentCountOutputType without action
   */
  export type IncidentCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model HealthCheck
   */

  export type AggregateHealthCheck = {
    _count: HealthCheckCountAggregateOutputType | null
    _avg: HealthCheckAvgAggregateOutputType | null
    _sum: HealthCheckSumAggregateOutputType | null
    _min: HealthCheckMinAggregateOutputType | null
    _max: HealthCheckMaxAggregateOutputType | null
  }

  export type HealthCheckAvgAggregateOutputType = {
    checkInterval: number | null
    timeout: number | null
    port: number | null
  }

  export type HealthCheckSumAggregateOutputType = {
    checkInterval: number | null
    timeout: number | null
    port: number | null
  }

  export type HealthCheckMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    checkInterval: number | null
    endpoint: string | null
    timeout: number | null
    processKeyword: string | null
    port: number | null
    customCommand: string | null
    expectedOutput: string | null
    restartCommand: string | null
    notifyOnFailure: boolean | null
  }

  export type HealthCheckMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    checkInterval: number | null
    endpoint: string | null
    timeout: number | null
    processKeyword: string | null
    port: number | null
    customCommand: string | null
    expectedOutput: string | null
    restartCommand: string | null
    notifyOnFailure: boolean | null
  }

  export type HealthCheckCountAggregateOutputType = {
    id: number
    name: number
    type: number
    enabled: number
    createdAt: number
    updatedAt: number
    checkInterval: number
    endpoint: number
    timeout: number
    processKeyword: number
    port: number
    customCommand: number
    expectedOutput: number
    restartCommand: number
    notifyOnFailure: number
    _all: number
  }


  export type HealthCheckAvgAggregateInputType = {
    checkInterval?: true
    timeout?: true
    port?: true
  }

  export type HealthCheckSumAggregateInputType = {
    checkInterval?: true
    timeout?: true
    port?: true
  }

  export type HealthCheckMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    checkInterval?: true
    endpoint?: true
    timeout?: true
    processKeyword?: true
    port?: true
    customCommand?: true
    expectedOutput?: true
    restartCommand?: true
    notifyOnFailure?: true
  }

  export type HealthCheckMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    checkInterval?: true
    endpoint?: true
    timeout?: true
    processKeyword?: true
    port?: true
    customCommand?: true
    expectedOutput?: true
    restartCommand?: true
    notifyOnFailure?: true
  }

  export type HealthCheckCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    checkInterval?: true
    endpoint?: true
    timeout?: true
    processKeyword?: true
    port?: true
    customCommand?: true
    expectedOutput?: true
    restartCommand?: true
    notifyOnFailure?: true
    _all?: true
  }

  export type HealthCheckAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthCheck to aggregate.
     */
    where?: HealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthChecks to fetch.
     */
    orderBy?: HealthCheckOrderByWithRelationInput | HealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthChecks
    **/
    _count?: true | HealthCheckCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HealthCheckAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HealthCheckSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthCheckMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthCheckMaxAggregateInputType
  }

  export type GetHealthCheckAggregateType<T extends HealthCheckAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthCheck]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthCheck[P]>
      : GetScalarType<T[P], AggregateHealthCheck[P]>
  }




  export type HealthCheckGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthCheckWhereInput
    orderBy?: HealthCheckOrderByWithAggregationInput | HealthCheckOrderByWithAggregationInput[]
    by: HealthCheckScalarFieldEnum[] | HealthCheckScalarFieldEnum
    having?: HealthCheckScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthCheckCountAggregateInputType | true
    _avg?: HealthCheckAvgAggregateInputType
    _sum?: HealthCheckSumAggregateInputType
    _min?: HealthCheckMinAggregateInputType
    _max?: HealthCheckMaxAggregateInputType
  }

  export type HealthCheckGroupByOutputType = {
    id: string
    name: string
    type: string
    enabled: boolean
    createdAt: Date
    updatedAt: Date
    checkInterval: number
    endpoint: string | null
    timeout: number | null
    processKeyword: string | null
    port: number | null
    customCommand: string | null
    expectedOutput: string | null
    restartCommand: string | null
    notifyOnFailure: boolean
    _count: HealthCheckCountAggregateOutputType | null
    _avg: HealthCheckAvgAggregateOutputType | null
    _sum: HealthCheckSumAggregateOutputType | null
    _min: HealthCheckMinAggregateOutputType | null
    _max: HealthCheckMaxAggregateOutputType | null
  }

  type GetHealthCheckGroupByPayload<T extends HealthCheckGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthCheckGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthCheckGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthCheckGroupByOutputType[P]>
            : GetScalarType<T[P], HealthCheckGroupByOutputType[P]>
        }
      >
    >


  export type HealthCheckSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkInterval?: boolean
    endpoint?: boolean
    timeout?: boolean
    processKeyword?: boolean
    port?: boolean
    customCommand?: boolean
    expectedOutput?: boolean
    restartCommand?: boolean
    notifyOnFailure?: boolean
    results?: boolean | HealthCheck$resultsArgs<ExtArgs>
    incidents?: boolean | HealthCheck$incidentsArgs<ExtArgs>
    _count?: boolean | HealthCheckCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthCheck"]>

  export type HealthCheckSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkInterval?: boolean
    endpoint?: boolean
    timeout?: boolean
    processKeyword?: boolean
    port?: boolean
    customCommand?: boolean
    expectedOutput?: boolean
    restartCommand?: boolean
    notifyOnFailure?: boolean
  }, ExtArgs["result"]["healthCheck"]>

  export type HealthCheckSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    checkInterval?: boolean
    endpoint?: boolean
    timeout?: boolean
    processKeyword?: boolean
    port?: boolean
    customCommand?: boolean
    expectedOutput?: boolean
    restartCommand?: boolean
    notifyOnFailure?: boolean
  }

  export type HealthCheckInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    results?: boolean | HealthCheck$resultsArgs<ExtArgs>
    incidents?: boolean | HealthCheck$incidentsArgs<ExtArgs>
    _count?: boolean | HealthCheckCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HealthCheckIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HealthCheckPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthCheck"
    objects: {
      results: Prisma.$HealthCheckResultPayload<ExtArgs>[]
      incidents: Prisma.$IncidentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      enabled: boolean
      createdAt: Date
      updatedAt: Date
      checkInterval: number
      endpoint: string | null
      timeout: number | null
      processKeyword: string | null
      port: number | null
      customCommand: string | null
      expectedOutput: string | null
      restartCommand: string | null
      notifyOnFailure: boolean
    }, ExtArgs["result"]["healthCheck"]>
    composites: {}
  }

  type HealthCheckGetPayload<S extends boolean | null | undefined | HealthCheckDefaultArgs> = $Result.GetResult<Prisma.$HealthCheckPayload, S>

  type HealthCheckCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HealthCheckFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HealthCheckCountAggregateInputType | true
    }

  export interface HealthCheckDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthCheck'], meta: { name: 'HealthCheck' } }
    /**
     * Find zero or one HealthCheck that matches the filter.
     * @param {HealthCheckFindUniqueArgs} args - Arguments to find a HealthCheck
     * @example
     * // Get one HealthCheck
     * const healthCheck = await prisma.healthCheck.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthCheckFindUniqueArgs>(args: SelectSubset<T, HealthCheckFindUniqueArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HealthCheck that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HealthCheckFindUniqueOrThrowArgs} args - Arguments to find a HealthCheck
     * @example
     * // Get one HealthCheck
     * const healthCheck = await prisma.healthCheck.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthCheckFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthCheckFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HealthCheck that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckFindFirstArgs} args - Arguments to find a HealthCheck
     * @example
     * // Get one HealthCheck
     * const healthCheck = await prisma.healthCheck.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthCheckFindFirstArgs>(args?: SelectSubset<T, HealthCheckFindFirstArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HealthCheck that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckFindFirstOrThrowArgs} args - Arguments to find a HealthCheck
     * @example
     * // Get one HealthCheck
     * const healthCheck = await prisma.healthCheck.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthCheckFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthCheckFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HealthChecks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthChecks
     * const healthChecks = await prisma.healthCheck.findMany()
     * 
     * // Get first 10 HealthChecks
     * const healthChecks = await prisma.healthCheck.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthCheckWithIdOnly = await prisma.healthCheck.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthCheckFindManyArgs>(args?: SelectSubset<T, HealthCheckFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HealthCheck.
     * @param {HealthCheckCreateArgs} args - Arguments to create a HealthCheck.
     * @example
     * // Create one HealthCheck
     * const HealthCheck = await prisma.healthCheck.create({
     *   data: {
     *     // ... data to create a HealthCheck
     *   }
     * })
     * 
     */
    create<T extends HealthCheckCreateArgs>(args: SelectSubset<T, HealthCheckCreateArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HealthChecks.
     * @param {HealthCheckCreateManyArgs} args - Arguments to create many HealthChecks.
     * @example
     * // Create many HealthChecks
     * const healthCheck = await prisma.healthCheck.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthCheckCreateManyArgs>(args?: SelectSubset<T, HealthCheckCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HealthChecks and returns the data saved in the database.
     * @param {HealthCheckCreateManyAndReturnArgs} args - Arguments to create many HealthChecks.
     * @example
     * // Create many HealthChecks
     * const healthCheck = await prisma.healthCheck.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HealthChecks and only return the `id`
     * const healthCheckWithIdOnly = await prisma.healthCheck.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HealthCheckCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthCheckCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HealthCheck.
     * @param {HealthCheckDeleteArgs} args - Arguments to delete one HealthCheck.
     * @example
     * // Delete one HealthCheck
     * const HealthCheck = await prisma.healthCheck.delete({
     *   where: {
     *     // ... filter to delete one HealthCheck
     *   }
     * })
     * 
     */
    delete<T extends HealthCheckDeleteArgs>(args: SelectSubset<T, HealthCheckDeleteArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HealthCheck.
     * @param {HealthCheckUpdateArgs} args - Arguments to update one HealthCheck.
     * @example
     * // Update one HealthCheck
     * const healthCheck = await prisma.healthCheck.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthCheckUpdateArgs>(args: SelectSubset<T, HealthCheckUpdateArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HealthChecks.
     * @param {HealthCheckDeleteManyArgs} args - Arguments to filter HealthChecks to delete.
     * @example
     * // Delete a few HealthChecks
     * const { count } = await prisma.healthCheck.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthCheckDeleteManyArgs>(args?: SelectSubset<T, HealthCheckDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthChecks
     * const healthCheck = await prisma.healthCheck.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthCheckUpdateManyArgs>(args: SelectSubset<T, HealthCheckUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthCheck.
     * @param {HealthCheckUpsertArgs} args - Arguments to update or create a HealthCheck.
     * @example
     * // Update or create a HealthCheck
     * const healthCheck = await prisma.healthCheck.upsert({
     *   create: {
     *     // ... data to create a HealthCheck
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthCheck we want to update
     *   }
     * })
     */
    upsert<T extends HealthCheckUpsertArgs>(args: SelectSubset<T, HealthCheckUpsertArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HealthChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckCountArgs} args - Arguments to filter HealthChecks to count.
     * @example
     * // Count the number of HealthChecks
     * const count = await prisma.healthCheck.count({
     *   where: {
     *     // ... the filter for the HealthChecks we want to count
     *   }
     * })
    **/
    count<T extends HealthCheckCountArgs>(
      args?: Subset<T, HealthCheckCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthCheckCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthCheckAggregateArgs>(args: Subset<T, HealthCheckAggregateArgs>): Prisma.PrismaPromise<GetHealthCheckAggregateType<T>>

    /**
     * Group by HealthCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthCheckGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthCheckGroupByArgs['orderBy'] }
        : { orderBy?: HealthCheckGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthCheckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthCheckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthCheck model
   */
  readonly fields: HealthCheckFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthCheck.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthCheckClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    results<T extends HealthCheck$resultsArgs<ExtArgs> = {}>(args?: Subset<T, HealthCheck$resultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findMany"> | Null>
    incidents<T extends HealthCheck$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, HealthCheck$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthCheck model
   */ 
  interface HealthCheckFieldRefs {
    readonly id: FieldRef<"HealthCheck", 'String'>
    readonly name: FieldRef<"HealthCheck", 'String'>
    readonly type: FieldRef<"HealthCheck", 'String'>
    readonly enabled: FieldRef<"HealthCheck", 'Boolean'>
    readonly createdAt: FieldRef<"HealthCheck", 'DateTime'>
    readonly updatedAt: FieldRef<"HealthCheck", 'DateTime'>
    readonly checkInterval: FieldRef<"HealthCheck", 'Int'>
    readonly endpoint: FieldRef<"HealthCheck", 'String'>
    readonly timeout: FieldRef<"HealthCheck", 'Int'>
    readonly processKeyword: FieldRef<"HealthCheck", 'String'>
    readonly port: FieldRef<"HealthCheck", 'Int'>
    readonly customCommand: FieldRef<"HealthCheck", 'String'>
    readonly expectedOutput: FieldRef<"HealthCheck", 'String'>
    readonly restartCommand: FieldRef<"HealthCheck", 'String'>
    readonly notifyOnFailure: FieldRef<"HealthCheck", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * HealthCheck findUnique
   */
  export type HealthCheckFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheck to fetch.
     */
    where: HealthCheckWhereUniqueInput
  }

  /**
   * HealthCheck findUniqueOrThrow
   */
  export type HealthCheckFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheck to fetch.
     */
    where: HealthCheckWhereUniqueInput
  }

  /**
   * HealthCheck findFirst
   */
  export type HealthCheckFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheck to fetch.
     */
    where?: HealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthChecks to fetch.
     */
    orderBy?: HealthCheckOrderByWithRelationInput | HealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthChecks.
     */
    cursor?: HealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthChecks.
     */
    distinct?: HealthCheckScalarFieldEnum | HealthCheckScalarFieldEnum[]
  }

  /**
   * HealthCheck findFirstOrThrow
   */
  export type HealthCheckFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheck to fetch.
     */
    where?: HealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthChecks to fetch.
     */
    orderBy?: HealthCheckOrderByWithRelationInput | HealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthChecks.
     */
    cursor?: HealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthChecks.
     */
    distinct?: HealthCheckScalarFieldEnum | HealthCheckScalarFieldEnum[]
  }

  /**
   * HealthCheck findMany
   */
  export type HealthCheckFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which HealthChecks to fetch.
     */
    where?: HealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthChecks to fetch.
     */
    orderBy?: HealthCheckOrderByWithRelationInput | HealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthChecks.
     */
    cursor?: HealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthChecks.
     */
    skip?: number
    distinct?: HealthCheckScalarFieldEnum | HealthCheckScalarFieldEnum[]
  }

  /**
   * HealthCheck create
   */
  export type HealthCheckCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * The data needed to create a HealthCheck.
     */
    data: XOR<HealthCheckCreateInput, HealthCheckUncheckedCreateInput>
  }

  /**
   * HealthCheck createMany
   */
  export type HealthCheckCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthChecks.
     */
    data: HealthCheckCreateManyInput | HealthCheckCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthCheck createManyAndReturn
   */
  export type HealthCheckCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HealthChecks.
     */
    data: HealthCheckCreateManyInput | HealthCheckCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthCheck update
   */
  export type HealthCheckUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * The data needed to update a HealthCheck.
     */
    data: XOR<HealthCheckUpdateInput, HealthCheckUncheckedUpdateInput>
    /**
     * Choose, which HealthCheck to update.
     */
    where: HealthCheckWhereUniqueInput
  }

  /**
   * HealthCheck updateMany
   */
  export type HealthCheckUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthChecks.
     */
    data: XOR<HealthCheckUpdateManyMutationInput, HealthCheckUncheckedUpdateManyInput>
    /**
     * Filter which HealthChecks to update
     */
    where?: HealthCheckWhereInput
  }

  /**
   * HealthCheck upsert
   */
  export type HealthCheckUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * The filter to search for the HealthCheck to update in case it exists.
     */
    where: HealthCheckWhereUniqueInput
    /**
     * In case the HealthCheck found by the `where` argument doesn't exist, create a new HealthCheck with this data.
     */
    create: XOR<HealthCheckCreateInput, HealthCheckUncheckedCreateInput>
    /**
     * In case the HealthCheck was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthCheckUpdateInput, HealthCheckUncheckedUpdateInput>
  }

  /**
   * HealthCheck delete
   */
  export type HealthCheckDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
    /**
     * Filter which HealthCheck to delete.
     */
    where: HealthCheckWhereUniqueInput
  }

  /**
   * HealthCheck deleteMany
   */
  export type HealthCheckDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthChecks to delete
     */
    where?: HealthCheckWhereInput
  }

  /**
   * HealthCheck.results
   */
  export type HealthCheck$resultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    where?: HealthCheckResultWhereInput
    orderBy?: HealthCheckResultOrderByWithRelationInput | HealthCheckResultOrderByWithRelationInput[]
    cursor?: HealthCheckResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HealthCheckResultScalarFieldEnum | HealthCheckResultScalarFieldEnum[]
  }

  /**
   * HealthCheck.incidents
   */
  export type HealthCheck$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    cursor?: IncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * HealthCheck without action
   */
  export type HealthCheckDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheck
     */
    select?: HealthCheckSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckInclude<ExtArgs> | null
  }


  /**
   * Model HealthCheckResult
   */

  export type AggregateHealthCheckResult = {
    _count: HealthCheckResultCountAggregateOutputType | null
    _avg: HealthCheckResultAvgAggregateOutputType | null
    _sum: HealthCheckResultSumAggregateOutputType | null
    _min: HealthCheckResultMinAggregateOutputType | null
    _max: HealthCheckResultMaxAggregateOutputType | null
  }

  export type HealthCheckResultAvgAggregateOutputType = {
    memoryUsage: number | null
    cpuUsage: number | null
    responseTime: number | null
  }

  export type HealthCheckResultSumAggregateOutputType = {
    memoryUsage: number | null
    cpuUsage: number | null
    responseTime: number | null
  }

  export type HealthCheckResultMinAggregateOutputType = {
    id: string | null
    healthCheckId: string | null
    status: string | null
    details: string | null
    memoryUsage: number | null
    cpuUsage: number | null
    responseTime: number | null
    createdAt: Date | null
  }

  export type HealthCheckResultMaxAggregateOutputType = {
    id: string | null
    healthCheckId: string | null
    status: string | null
    details: string | null
    memoryUsage: number | null
    cpuUsage: number | null
    responseTime: number | null
    createdAt: Date | null
  }

  export type HealthCheckResultCountAggregateOutputType = {
    id: number
    healthCheckId: number
    status: number
    details: number
    memoryUsage: number
    cpuUsage: number
    responseTime: number
    createdAt: number
    _all: number
  }


  export type HealthCheckResultAvgAggregateInputType = {
    memoryUsage?: true
    cpuUsage?: true
    responseTime?: true
  }

  export type HealthCheckResultSumAggregateInputType = {
    memoryUsage?: true
    cpuUsage?: true
    responseTime?: true
  }

  export type HealthCheckResultMinAggregateInputType = {
    id?: true
    healthCheckId?: true
    status?: true
    details?: true
    memoryUsage?: true
    cpuUsage?: true
    responseTime?: true
    createdAt?: true
  }

  export type HealthCheckResultMaxAggregateInputType = {
    id?: true
    healthCheckId?: true
    status?: true
    details?: true
    memoryUsage?: true
    cpuUsage?: true
    responseTime?: true
    createdAt?: true
  }

  export type HealthCheckResultCountAggregateInputType = {
    id?: true
    healthCheckId?: true
    status?: true
    details?: true
    memoryUsage?: true
    cpuUsage?: true
    responseTime?: true
    createdAt?: true
    _all?: true
  }

  export type HealthCheckResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthCheckResult to aggregate.
     */
    where?: HealthCheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCheckResults to fetch.
     */
    orderBy?: HealthCheckResultOrderByWithRelationInput | HealthCheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthCheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthCheckResults
    **/
    _count?: true | HealthCheckResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HealthCheckResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HealthCheckResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthCheckResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthCheckResultMaxAggregateInputType
  }

  export type GetHealthCheckResultAggregateType<T extends HealthCheckResultAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthCheckResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthCheckResult[P]>
      : GetScalarType<T[P], AggregateHealthCheckResult[P]>
  }




  export type HealthCheckResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthCheckResultWhereInput
    orderBy?: HealthCheckResultOrderByWithAggregationInput | HealthCheckResultOrderByWithAggregationInput[]
    by: HealthCheckResultScalarFieldEnum[] | HealthCheckResultScalarFieldEnum
    having?: HealthCheckResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthCheckResultCountAggregateInputType | true
    _avg?: HealthCheckResultAvgAggregateInputType
    _sum?: HealthCheckResultSumAggregateInputType
    _min?: HealthCheckResultMinAggregateInputType
    _max?: HealthCheckResultMaxAggregateInputType
  }

  export type HealthCheckResultGroupByOutputType = {
    id: string
    healthCheckId: string
    status: string
    details: string | null
    memoryUsage: number | null
    cpuUsage: number | null
    responseTime: number | null
    createdAt: Date
    _count: HealthCheckResultCountAggregateOutputType | null
    _avg: HealthCheckResultAvgAggregateOutputType | null
    _sum: HealthCheckResultSumAggregateOutputType | null
    _min: HealthCheckResultMinAggregateOutputType | null
    _max: HealthCheckResultMaxAggregateOutputType | null
  }

  type GetHealthCheckResultGroupByPayload<T extends HealthCheckResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthCheckResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthCheckResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthCheckResultGroupByOutputType[P]>
            : GetScalarType<T[P], HealthCheckResultGroupByOutputType[P]>
        }
      >
    >


  export type HealthCheckResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    healthCheckId?: boolean
    status?: boolean
    details?: boolean
    memoryUsage?: boolean
    cpuUsage?: boolean
    responseTime?: boolean
    createdAt?: boolean
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthCheckResult"]>

  export type HealthCheckResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    healthCheckId?: boolean
    status?: boolean
    details?: boolean
    memoryUsage?: boolean
    cpuUsage?: boolean
    responseTime?: boolean
    createdAt?: boolean
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthCheckResult"]>

  export type HealthCheckResultSelectScalar = {
    id?: boolean
    healthCheckId?: boolean
    status?: boolean
    details?: boolean
    memoryUsage?: boolean
    cpuUsage?: boolean
    responseTime?: boolean
    createdAt?: boolean
  }

  export type HealthCheckResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }
  export type HealthCheckResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }

  export type $HealthCheckResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthCheckResult"
    objects: {
      healthCheck: Prisma.$HealthCheckPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      healthCheckId: string
      status: string
      details: string | null
      memoryUsage: number | null
      cpuUsage: number | null
      responseTime: number | null
      createdAt: Date
    }, ExtArgs["result"]["healthCheckResult"]>
    composites: {}
  }

  type HealthCheckResultGetPayload<S extends boolean | null | undefined | HealthCheckResultDefaultArgs> = $Result.GetResult<Prisma.$HealthCheckResultPayload, S>

  type HealthCheckResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HealthCheckResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HealthCheckResultCountAggregateInputType | true
    }

  export interface HealthCheckResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthCheckResult'], meta: { name: 'HealthCheckResult' } }
    /**
     * Find zero or one HealthCheckResult that matches the filter.
     * @param {HealthCheckResultFindUniqueArgs} args - Arguments to find a HealthCheckResult
     * @example
     * // Get one HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthCheckResultFindUniqueArgs>(args: SelectSubset<T, HealthCheckResultFindUniqueArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HealthCheckResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HealthCheckResultFindUniqueOrThrowArgs} args - Arguments to find a HealthCheckResult
     * @example
     * // Get one HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthCheckResultFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthCheckResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HealthCheckResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultFindFirstArgs} args - Arguments to find a HealthCheckResult
     * @example
     * // Get one HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthCheckResultFindFirstArgs>(args?: SelectSubset<T, HealthCheckResultFindFirstArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HealthCheckResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultFindFirstOrThrowArgs} args - Arguments to find a HealthCheckResult
     * @example
     * // Get one HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthCheckResultFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthCheckResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HealthCheckResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthCheckResults
     * const healthCheckResults = await prisma.healthCheckResult.findMany()
     * 
     * // Get first 10 HealthCheckResults
     * const healthCheckResults = await prisma.healthCheckResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthCheckResultWithIdOnly = await prisma.healthCheckResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthCheckResultFindManyArgs>(args?: SelectSubset<T, HealthCheckResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HealthCheckResult.
     * @param {HealthCheckResultCreateArgs} args - Arguments to create a HealthCheckResult.
     * @example
     * // Create one HealthCheckResult
     * const HealthCheckResult = await prisma.healthCheckResult.create({
     *   data: {
     *     // ... data to create a HealthCheckResult
     *   }
     * })
     * 
     */
    create<T extends HealthCheckResultCreateArgs>(args: SelectSubset<T, HealthCheckResultCreateArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HealthCheckResults.
     * @param {HealthCheckResultCreateManyArgs} args - Arguments to create many HealthCheckResults.
     * @example
     * // Create many HealthCheckResults
     * const healthCheckResult = await prisma.healthCheckResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthCheckResultCreateManyArgs>(args?: SelectSubset<T, HealthCheckResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HealthCheckResults and returns the data saved in the database.
     * @param {HealthCheckResultCreateManyAndReturnArgs} args - Arguments to create many HealthCheckResults.
     * @example
     * // Create many HealthCheckResults
     * const healthCheckResult = await prisma.healthCheckResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HealthCheckResults and only return the `id`
     * const healthCheckResultWithIdOnly = await prisma.healthCheckResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HealthCheckResultCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthCheckResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HealthCheckResult.
     * @param {HealthCheckResultDeleteArgs} args - Arguments to delete one HealthCheckResult.
     * @example
     * // Delete one HealthCheckResult
     * const HealthCheckResult = await prisma.healthCheckResult.delete({
     *   where: {
     *     // ... filter to delete one HealthCheckResult
     *   }
     * })
     * 
     */
    delete<T extends HealthCheckResultDeleteArgs>(args: SelectSubset<T, HealthCheckResultDeleteArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HealthCheckResult.
     * @param {HealthCheckResultUpdateArgs} args - Arguments to update one HealthCheckResult.
     * @example
     * // Update one HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthCheckResultUpdateArgs>(args: SelectSubset<T, HealthCheckResultUpdateArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HealthCheckResults.
     * @param {HealthCheckResultDeleteManyArgs} args - Arguments to filter HealthCheckResults to delete.
     * @example
     * // Delete a few HealthCheckResults
     * const { count } = await prisma.healthCheckResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthCheckResultDeleteManyArgs>(args?: SelectSubset<T, HealthCheckResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthCheckResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthCheckResults
     * const healthCheckResult = await prisma.healthCheckResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthCheckResultUpdateManyArgs>(args: SelectSubset<T, HealthCheckResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HealthCheckResult.
     * @param {HealthCheckResultUpsertArgs} args - Arguments to update or create a HealthCheckResult.
     * @example
     * // Update or create a HealthCheckResult
     * const healthCheckResult = await prisma.healthCheckResult.upsert({
     *   create: {
     *     // ... data to create a HealthCheckResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthCheckResult we want to update
     *   }
     * })
     */
    upsert<T extends HealthCheckResultUpsertArgs>(args: SelectSubset<T, HealthCheckResultUpsertArgs<ExtArgs>>): Prisma__HealthCheckResultClient<$Result.GetResult<Prisma.$HealthCheckResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HealthCheckResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultCountArgs} args - Arguments to filter HealthCheckResults to count.
     * @example
     * // Count the number of HealthCheckResults
     * const count = await prisma.healthCheckResult.count({
     *   where: {
     *     // ... the filter for the HealthCheckResults we want to count
     *   }
     * })
    **/
    count<T extends HealthCheckResultCountArgs>(
      args?: Subset<T, HealthCheckResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthCheckResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthCheckResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthCheckResultAggregateArgs>(args: Subset<T, HealthCheckResultAggregateArgs>): Prisma.PrismaPromise<GetHealthCheckResultAggregateType<T>>

    /**
     * Group by HealthCheckResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthCheckResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthCheckResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthCheckResultGroupByArgs['orderBy'] }
        : { orderBy?: HealthCheckResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthCheckResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthCheckResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthCheckResult model
   */
  readonly fields: HealthCheckResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthCheckResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthCheckResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    healthCheck<T extends HealthCheckDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HealthCheckDefaultArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthCheckResult model
   */ 
  interface HealthCheckResultFieldRefs {
    readonly id: FieldRef<"HealthCheckResult", 'String'>
    readonly healthCheckId: FieldRef<"HealthCheckResult", 'String'>
    readonly status: FieldRef<"HealthCheckResult", 'String'>
    readonly details: FieldRef<"HealthCheckResult", 'String'>
    readonly memoryUsage: FieldRef<"HealthCheckResult", 'Float'>
    readonly cpuUsage: FieldRef<"HealthCheckResult", 'Float'>
    readonly responseTime: FieldRef<"HealthCheckResult", 'Int'>
    readonly createdAt: FieldRef<"HealthCheckResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HealthCheckResult findUnique
   */
  export type HealthCheckResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheckResult to fetch.
     */
    where: HealthCheckResultWhereUniqueInput
  }

  /**
   * HealthCheckResult findUniqueOrThrow
   */
  export type HealthCheckResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheckResult to fetch.
     */
    where: HealthCheckResultWhereUniqueInput
  }

  /**
   * HealthCheckResult findFirst
   */
  export type HealthCheckResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheckResult to fetch.
     */
    where?: HealthCheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCheckResults to fetch.
     */
    orderBy?: HealthCheckResultOrderByWithRelationInput | HealthCheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthCheckResults.
     */
    cursor?: HealthCheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthCheckResults.
     */
    distinct?: HealthCheckResultScalarFieldEnum | HealthCheckResultScalarFieldEnum[]
  }

  /**
   * HealthCheckResult findFirstOrThrow
   */
  export type HealthCheckResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheckResult to fetch.
     */
    where?: HealthCheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCheckResults to fetch.
     */
    orderBy?: HealthCheckResultOrderByWithRelationInput | HealthCheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthCheckResults.
     */
    cursor?: HealthCheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCheckResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthCheckResults.
     */
    distinct?: HealthCheckResultScalarFieldEnum | HealthCheckResultScalarFieldEnum[]
  }

  /**
   * HealthCheckResult findMany
   */
  export type HealthCheckResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter, which HealthCheckResults to fetch.
     */
    where?: HealthCheckResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthCheckResults to fetch.
     */
    orderBy?: HealthCheckResultOrderByWithRelationInput | HealthCheckResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthCheckResults.
     */
    cursor?: HealthCheckResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthCheckResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthCheckResults.
     */
    skip?: number
    distinct?: HealthCheckResultScalarFieldEnum | HealthCheckResultScalarFieldEnum[]
  }

  /**
   * HealthCheckResult create
   */
  export type HealthCheckResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * The data needed to create a HealthCheckResult.
     */
    data: XOR<HealthCheckResultCreateInput, HealthCheckResultUncheckedCreateInput>
  }

  /**
   * HealthCheckResult createMany
   */
  export type HealthCheckResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthCheckResults.
     */
    data: HealthCheckResultCreateManyInput | HealthCheckResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthCheckResult createManyAndReturn
   */
  export type HealthCheckResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HealthCheckResults.
     */
    data: HealthCheckResultCreateManyInput | HealthCheckResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HealthCheckResult update
   */
  export type HealthCheckResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * The data needed to update a HealthCheckResult.
     */
    data: XOR<HealthCheckResultUpdateInput, HealthCheckResultUncheckedUpdateInput>
    /**
     * Choose, which HealthCheckResult to update.
     */
    where: HealthCheckResultWhereUniqueInput
  }

  /**
   * HealthCheckResult updateMany
   */
  export type HealthCheckResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthCheckResults.
     */
    data: XOR<HealthCheckResultUpdateManyMutationInput, HealthCheckResultUncheckedUpdateManyInput>
    /**
     * Filter which HealthCheckResults to update
     */
    where?: HealthCheckResultWhereInput
  }

  /**
   * HealthCheckResult upsert
   */
  export type HealthCheckResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * The filter to search for the HealthCheckResult to update in case it exists.
     */
    where: HealthCheckResultWhereUniqueInput
    /**
     * In case the HealthCheckResult found by the `where` argument doesn't exist, create a new HealthCheckResult with this data.
     */
    create: XOR<HealthCheckResultCreateInput, HealthCheckResultUncheckedCreateInput>
    /**
     * In case the HealthCheckResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthCheckResultUpdateInput, HealthCheckResultUncheckedUpdateInput>
  }

  /**
   * HealthCheckResult delete
   */
  export type HealthCheckResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
    /**
     * Filter which HealthCheckResult to delete.
     */
    where: HealthCheckResultWhereUniqueInput
  }

  /**
   * HealthCheckResult deleteMany
   */
  export type HealthCheckResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthCheckResults to delete
     */
    where?: HealthCheckResultWhereInput
  }

  /**
   * HealthCheckResult without action
   */
  export type HealthCheckResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthCheckResult
     */
    select?: HealthCheckResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthCheckResultInclude<ExtArgs> | null
  }


  /**
   * Model Incident
   */

  export type AggregateIncident = {
    _count: IncidentCountAggregateOutputType | null
    _min: IncidentMinAggregateOutputType | null
    _max: IncidentMaxAggregateOutputType | null
  }

  export type IncidentMinAggregateOutputType = {
    id: string | null
    healthCheckId: string | null
    title: string | null
    status: string | null
    severity: string | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
  }

  export type IncidentMaxAggregateOutputType = {
    id: string | null
    healthCheckId: string | null
    title: string | null
    status: string | null
    severity: string | null
    details: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
  }

  export type IncidentCountAggregateOutputType = {
    id: number
    healthCheckId: number
    title: number
    status: number
    severity: number
    details: number
    createdAt: number
    updatedAt: number
    resolvedAt: number
    _all: number
  }


  export type IncidentMinAggregateInputType = {
    id?: true
    healthCheckId?: true
    title?: true
    status?: true
    severity?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
  }

  export type IncidentMaxAggregateInputType = {
    id?: true
    healthCheckId?: true
    title?: true
    status?: true
    severity?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
  }

  export type IncidentCountAggregateInputType = {
    id?: true
    healthCheckId?: true
    title?: true
    status?: true
    severity?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type IncidentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Incident to aggregate.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Incidents
    **/
    _count?: true | IncidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncidentMaxAggregateInputType
  }

  export type GetIncidentAggregateType<T extends IncidentAggregateArgs> = {
        [P in keyof T & keyof AggregateIncident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncident[P]>
      : GetScalarType<T[P], AggregateIncident[P]>
  }




  export type IncidentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentWhereInput
    orderBy?: IncidentOrderByWithAggregationInput | IncidentOrderByWithAggregationInput[]
    by: IncidentScalarFieldEnum[] | IncidentScalarFieldEnum
    having?: IncidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncidentCountAggregateInputType | true
    _min?: IncidentMinAggregateInputType
    _max?: IncidentMaxAggregateInputType
  }

  export type IncidentGroupByOutputType = {
    id: string
    healthCheckId: string
    title: string
    status: string
    severity: string
    details: string | null
    createdAt: Date
    updatedAt: Date
    resolvedAt: Date | null
    _count: IncidentCountAggregateOutputType | null
    _min: IncidentMinAggregateOutputType | null
    _max: IncidentMaxAggregateOutputType | null
  }

  type GetIncidentGroupByPayload<T extends IncidentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IncidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncidentGroupByOutputType[P]>
            : GetScalarType<T[P], IncidentGroupByOutputType[P]>
        }
      >
    >


  export type IncidentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    healthCheckId?: boolean
    title?: boolean
    status?: boolean
    severity?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
    events?: boolean | Incident$eventsArgs<ExtArgs>
    _count?: boolean | IncidentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["incident"]>

  export type IncidentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    healthCheckId?: boolean
    title?: boolean
    status?: boolean
    severity?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["incident"]>

  export type IncidentSelectScalar = {
    id?: boolean
    healthCheckId?: boolean
    title?: boolean
    status?: boolean
    severity?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
  }

  export type IncidentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
    events?: boolean | Incident$eventsArgs<ExtArgs>
    _count?: boolean | IncidentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IncidentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    healthCheck?: boolean | HealthCheckDefaultArgs<ExtArgs>
  }

  export type $IncidentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Incident"
    objects: {
      healthCheck: Prisma.$HealthCheckPayload<ExtArgs>
      events: Prisma.$IncidentEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      healthCheckId: string
      title: string
      status: string
      severity: string
      details: string | null
      createdAt: Date
      updatedAt: Date
      resolvedAt: Date | null
    }, ExtArgs["result"]["incident"]>
    composites: {}
  }

  type IncidentGetPayload<S extends boolean | null | undefined | IncidentDefaultArgs> = $Result.GetResult<Prisma.$IncidentPayload, S>

  type IncidentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IncidentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IncidentCountAggregateInputType | true
    }

  export interface IncidentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Incident'], meta: { name: 'Incident' } }
    /**
     * Find zero or one Incident that matches the filter.
     * @param {IncidentFindUniqueArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IncidentFindUniqueArgs>(args: SelectSubset<T, IncidentFindUniqueArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Incident that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IncidentFindUniqueOrThrowArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IncidentFindUniqueOrThrowArgs>(args: SelectSubset<T, IncidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Incident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindFirstArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IncidentFindFirstArgs>(args?: SelectSubset<T, IncidentFindFirstArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Incident that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindFirstOrThrowArgs} args - Arguments to find a Incident
     * @example
     * // Get one Incident
     * const incident = await prisma.incident.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IncidentFindFirstOrThrowArgs>(args?: SelectSubset<T, IncidentFindFirstOrThrowArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Incidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Incidents
     * const incidents = await prisma.incident.findMany()
     * 
     * // Get first 10 Incidents
     * const incidents = await prisma.incident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const incidentWithIdOnly = await prisma.incident.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IncidentFindManyArgs>(args?: SelectSubset<T, IncidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Incident.
     * @param {IncidentCreateArgs} args - Arguments to create a Incident.
     * @example
     * // Create one Incident
     * const Incident = await prisma.incident.create({
     *   data: {
     *     // ... data to create a Incident
     *   }
     * })
     * 
     */
    create<T extends IncidentCreateArgs>(args: SelectSubset<T, IncidentCreateArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Incidents.
     * @param {IncidentCreateManyArgs} args - Arguments to create many Incidents.
     * @example
     * // Create many Incidents
     * const incident = await prisma.incident.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IncidentCreateManyArgs>(args?: SelectSubset<T, IncidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Incidents and returns the data saved in the database.
     * @param {IncidentCreateManyAndReturnArgs} args - Arguments to create many Incidents.
     * @example
     * // Create many Incidents
     * const incident = await prisma.incident.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Incidents and only return the `id`
     * const incidentWithIdOnly = await prisma.incident.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IncidentCreateManyAndReturnArgs>(args?: SelectSubset<T, IncidentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Incident.
     * @param {IncidentDeleteArgs} args - Arguments to delete one Incident.
     * @example
     * // Delete one Incident
     * const Incident = await prisma.incident.delete({
     *   where: {
     *     // ... filter to delete one Incident
     *   }
     * })
     * 
     */
    delete<T extends IncidentDeleteArgs>(args: SelectSubset<T, IncidentDeleteArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Incident.
     * @param {IncidentUpdateArgs} args - Arguments to update one Incident.
     * @example
     * // Update one Incident
     * const incident = await prisma.incident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IncidentUpdateArgs>(args: SelectSubset<T, IncidentUpdateArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Incidents.
     * @param {IncidentDeleteManyArgs} args - Arguments to filter Incidents to delete.
     * @example
     * // Delete a few Incidents
     * const { count } = await prisma.incident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IncidentDeleteManyArgs>(args?: SelectSubset<T, IncidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Incidents
     * const incident = await prisma.incident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IncidentUpdateManyArgs>(args: SelectSubset<T, IncidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Incident.
     * @param {IncidentUpsertArgs} args - Arguments to update or create a Incident.
     * @example
     * // Update or create a Incident
     * const incident = await prisma.incident.upsert({
     *   create: {
     *     // ... data to create a Incident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Incident we want to update
     *   }
     * })
     */
    upsert<T extends IncidentUpsertArgs>(args: SelectSubset<T, IncidentUpsertArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Incidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentCountArgs} args - Arguments to filter Incidents to count.
     * @example
     * // Count the number of Incidents
     * const count = await prisma.incident.count({
     *   where: {
     *     // ... the filter for the Incidents we want to count
     *   }
     * })
    **/
    count<T extends IncidentCountArgs>(
      args?: Subset<T, IncidentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Incident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncidentAggregateArgs>(args: Subset<T, IncidentAggregateArgs>): Prisma.PrismaPromise<GetIncidentAggregateType<T>>

    /**
     * Group by Incident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncidentGroupByArgs['orderBy'] }
        : { orderBy?: IncidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Incident model
   */
  readonly fields: IncidentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Incident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IncidentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    healthCheck<T extends HealthCheckDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HealthCheckDefaultArgs<ExtArgs>>): Prisma__HealthCheckClient<$Result.GetResult<Prisma.$HealthCheckPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    events<T extends Incident$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Incident$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Incident model
   */ 
  interface IncidentFieldRefs {
    readonly id: FieldRef<"Incident", 'String'>
    readonly healthCheckId: FieldRef<"Incident", 'String'>
    readonly title: FieldRef<"Incident", 'String'>
    readonly status: FieldRef<"Incident", 'String'>
    readonly severity: FieldRef<"Incident", 'String'>
    readonly details: FieldRef<"Incident", 'String'>
    readonly createdAt: FieldRef<"Incident", 'DateTime'>
    readonly updatedAt: FieldRef<"Incident", 'DateTime'>
    readonly resolvedAt: FieldRef<"Incident", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Incident findUnique
   */
  export type IncidentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident findUniqueOrThrow
   */
  export type IncidentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident findFirst
   */
  export type IncidentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Incidents.
     */
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident findFirstOrThrow
   */
  export type IncidentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incident to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Incidents.
     */
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident findMany
   */
  export type IncidentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter, which Incidents to fetch.
     */
    where?: IncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Incidents to fetch.
     */
    orderBy?: IncidentOrderByWithRelationInput | IncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Incidents.
     */
    cursor?: IncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Incidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Incidents.
     */
    skip?: number
    distinct?: IncidentScalarFieldEnum | IncidentScalarFieldEnum[]
  }

  /**
   * Incident create
   */
  export type IncidentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The data needed to create a Incident.
     */
    data: XOR<IncidentCreateInput, IncidentUncheckedCreateInput>
  }

  /**
   * Incident createMany
   */
  export type IncidentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Incidents.
     */
    data: IncidentCreateManyInput | IncidentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Incident createManyAndReturn
   */
  export type IncidentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Incidents.
     */
    data: IncidentCreateManyInput | IncidentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Incident update
   */
  export type IncidentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The data needed to update a Incident.
     */
    data: XOR<IncidentUpdateInput, IncidentUncheckedUpdateInput>
    /**
     * Choose, which Incident to update.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident updateMany
   */
  export type IncidentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Incidents.
     */
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyInput>
    /**
     * Filter which Incidents to update
     */
    where?: IncidentWhereInput
  }

  /**
   * Incident upsert
   */
  export type IncidentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * The filter to search for the Incident to update in case it exists.
     */
    where: IncidentWhereUniqueInput
    /**
     * In case the Incident found by the `where` argument doesn't exist, create a new Incident with this data.
     */
    create: XOR<IncidentCreateInput, IncidentUncheckedCreateInput>
    /**
     * In case the Incident was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IncidentUpdateInput, IncidentUncheckedUpdateInput>
  }

  /**
   * Incident delete
   */
  export type IncidentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
    /**
     * Filter which Incident to delete.
     */
    where: IncidentWhereUniqueInput
  }

  /**
   * Incident deleteMany
   */
  export type IncidentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Incidents to delete
     */
    where?: IncidentWhereInput
  }

  /**
   * Incident.events
   */
  export type Incident$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    where?: IncidentEventWhereInput
    orderBy?: IncidentEventOrderByWithRelationInput | IncidentEventOrderByWithRelationInput[]
    cursor?: IncidentEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IncidentEventScalarFieldEnum | IncidentEventScalarFieldEnum[]
  }

  /**
   * Incident without action
   */
  export type IncidentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Incident
     */
    select?: IncidentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentInclude<ExtArgs> | null
  }


  /**
   * Model IncidentEvent
   */

  export type AggregateIncidentEvent = {
    _count: IncidentEventCountAggregateOutputType | null
    _min: IncidentEventMinAggregateOutputType | null
    _max: IncidentEventMaxAggregateOutputType | null
  }

  export type IncidentEventMinAggregateOutputType = {
    id: string | null
    incidentId: string | null
    message: string | null
    createdAt: Date | null
  }

  export type IncidentEventMaxAggregateOutputType = {
    id: string | null
    incidentId: string | null
    message: string | null
    createdAt: Date | null
  }

  export type IncidentEventCountAggregateOutputType = {
    id: number
    incidentId: number
    message: number
    createdAt: number
    _all: number
  }


  export type IncidentEventMinAggregateInputType = {
    id?: true
    incidentId?: true
    message?: true
    createdAt?: true
  }

  export type IncidentEventMaxAggregateInputType = {
    id?: true
    incidentId?: true
    message?: true
    createdAt?: true
  }

  export type IncidentEventCountAggregateInputType = {
    id?: true
    incidentId?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type IncidentEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IncidentEvent to aggregate.
     */
    where?: IncidentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncidentEvents to fetch.
     */
    orderBy?: IncidentEventOrderByWithRelationInput | IncidentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IncidentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncidentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncidentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IncidentEvents
    **/
    _count?: true | IncidentEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncidentEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncidentEventMaxAggregateInputType
  }

  export type GetIncidentEventAggregateType<T extends IncidentEventAggregateArgs> = {
        [P in keyof T & keyof AggregateIncidentEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncidentEvent[P]>
      : GetScalarType<T[P], AggregateIncidentEvent[P]>
  }




  export type IncidentEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IncidentEventWhereInput
    orderBy?: IncidentEventOrderByWithAggregationInput | IncidentEventOrderByWithAggregationInput[]
    by: IncidentEventScalarFieldEnum[] | IncidentEventScalarFieldEnum
    having?: IncidentEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncidentEventCountAggregateInputType | true
    _min?: IncidentEventMinAggregateInputType
    _max?: IncidentEventMaxAggregateInputType
  }

  export type IncidentEventGroupByOutputType = {
    id: string
    incidentId: string
    message: string
    createdAt: Date
    _count: IncidentEventCountAggregateOutputType | null
    _min: IncidentEventMinAggregateOutputType | null
    _max: IncidentEventMaxAggregateOutputType | null
  }

  type GetIncidentEventGroupByPayload<T extends IncidentEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IncidentEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncidentEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncidentEventGroupByOutputType[P]>
            : GetScalarType<T[P], IncidentEventGroupByOutputType[P]>
        }
      >
    >


  export type IncidentEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incidentId?: boolean
    message?: boolean
    createdAt?: boolean
    incident?: boolean | IncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["incidentEvent"]>

  export type IncidentEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    incidentId?: boolean
    message?: boolean
    createdAt?: boolean
    incident?: boolean | IncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["incidentEvent"]>

  export type IncidentEventSelectScalar = {
    id?: boolean
    incidentId?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type IncidentEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    incident?: boolean | IncidentDefaultArgs<ExtArgs>
  }
  export type IncidentEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    incident?: boolean | IncidentDefaultArgs<ExtArgs>
  }

  export type $IncidentEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IncidentEvent"
    objects: {
      incident: Prisma.$IncidentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      incidentId: string
      message: string
      createdAt: Date
    }, ExtArgs["result"]["incidentEvent"]>
    composites: {}
  }

  type IncidentEventGetPayload<S extends boolean | null | undefined | IncidentEventDefaultArgs> = $Result.GetResult<Prisma.$IncidentEventPayload, S>

  type IncidentEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IncidentEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IncidentEventCountAggregateInputType | true
    }

  export interface IncidentEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IncidentEvent'], meta: { name: 'IncidentEvent' } }
    /**
     * Find zero or one IncidentEvent that matches the filter.
     * @param {IncidentEventFindUniqueArgs} args - Arguments to find a IncidentEvent
     * @example
     * // Get one IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IncidentEventFindUniqueArgs>(args: SelectSubset<T, IncidentEventFindUniqueArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IncidentEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IncidentEventFindUniqueOrThrowArgs} args - Arguments to find a IncidentEvent
     * @example
     * // Get one IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IncidentEventFindUniqueOrThrowArgs>(args: SelectSubset<T, IncidentEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IncidentEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventFindFirstArgs} args - Arguments to find a IncidentEvent
     * @example
     * // Get one IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IncidentEventFindFirstArgs>(args?: SelectSubset<T, IncidentEventFindFirstArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IncidentEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventFindFirstOrThrowArgs} args - Arguments to find a IncidentEvent
     * @example
     * // Get one IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IncidentEventFindFirstOrThrowArgs>(args?: SelectSubset<T, IncidentEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IncidentEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IncidentEvents
     * const incidentEvents = await prisma.incidentEvent.findMany()
     * 
     * // Get first 10 IncidentEvents
     * const incidentEvents = await prisma.incidentEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const incidentEventWithIdOnly = await prisma.incidentEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IncidentEventFindManyArgs>(args?: SelectSubset<T, IncidentEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IncidentEvent.
     * @param {IncidentEventCreateArgs} args - Arguments to create a IncidentEvent.
     * @example
     * // Create one IncidentEvent
     * const IncidentEvent = await prisma.incidentEvent.create({
     *   data: {
     *     // ... data to create a IncidentEvent
     *   }
     * })
     * 
     */
    create<T extends IncidentEventCreateArgs>(args: SelectSubset<T, IncidentEventCreateArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IncidentEvents.
     * @param {IncidentEventCreateManyArgs} args - Arguments to create many IncidentEvents.
     * @example
     * // Create many IncidentEvents
     * const incidentEvent = await prisma.incidentEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IncidentEventCreateManyArgs>(args?: SelectSubset<T, IncidentEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IncidentEvents and returns the data saved in the database.
     * @param {IncidentEventCreateManyAndReturnArgs} args - Arguments to create many IncidentEvents.
     * @example
     * // Create many IncidentEvents
     * const incidentEvent = await prisma.incidentEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IncidentEvents and only return the `id`
     * const incidentEventWithIdOnly = await prisma.incidentEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IncidentEventCreateManyAndReturnArgs>(args?: SelectSubset<T, IncidentEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IncidentEvent.
     * @param {IncidentEventDeleteArgs} args - Arguments to delete one IncidentEvent.
     * @example
     * // Delete one IncidentEvent
     * const IncidentEvent = await prisma.incidentEvent.delete({
     *   where: {
     *     // ... filter to delete one IncidentEvent
     *   }
     * })
     * 
     */
    delete<T extends IncidentEventDeleteArgs>(args: SelectSubset<T, IncidentEventDeleteArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IncidentEvent.
     * @param {IncidentEventUpdateArgs} args - Arguments to update one IncidentEvent.
     * @example
     * // Update one IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IncidentEventUpdateArgs>(args: SelectSubset<T, IncidentEventUpdateArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IncidentEvents.
     * @param {IncidentEventDeleteManyArgs} args - Arguments to filter IncidentEvents to delete.
     * @example
     * // Delete a few IncidentEvents
     * const { count } = await prisma.incidentEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IncidentEventDeleteManyArgs>(args?: SelectSubset<T, IncidentEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IncidentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IncidentEvents
     * const incidentEvent = await prisma.incidentEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IncidentEventUpdateManyArgs>(args: SelectSubset<T, IncidentEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IncidentEvent.
     * @param {IncidentEventUpsertArgs} args - Arguments to update or create a IncidentEvent.
     * @example
     * // Update or create a IncidentEvent
     * const incidentEvent = await prisma.incidentEvent.upsert({
     *   create: {
     *     // ... data to create a IncidentEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IncidentEvent we want to update
     *   }
     * })
     */
    upsert<T extends IncidentEventUpsertArgs>(args: SelectSubset<T, IncidentEventUpsertArgs<ExtArgs>>): Prisma__IncidentEventClient<$Result.GetResult<Prisma.$IncidentEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IncidentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventCountArgs} args - Arguments to filter IncidentEvents to count.
     * @example
     * // Count the number of IncidentEvents
     * const count = await prisma.incidentEvent.count({
     *   where: {
     *     // ... the filter for the IncidentEvents we want to count
     *   }
     * })
    **/
    count<T extends IncidentEventCountArgs>(
      args?: Subset<T, IncidentEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncidentEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IncidentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncidentEventAggregateArgs>(args: Subset<T, IncidentEventAggregateArgs>): Prisma.PrismaPromise<GetIncidentEventAggregateType<T>>

    /**
     * Group by IncidentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidentEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncidentEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncidentEventGroupByArgs['orderBy'] }
        : { orderBy?: IncidentEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncidentEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidentEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IncidentEvent model
   */
  readonly fields: IncidentEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IncidentEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IncidentEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    incident<T extends IncidentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IncidentDefaultArgs<ExtArgs>>): Prisma__IncidentClient<$Result.GetResult<Prisma.$IncidentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IncidentEvent model
   */ 
  interface IncidentEventFieldRefs {
    readonly id: FieldRef<"IncidentEvent", 'String'>
    readonly incidentId: FieldRef<"IncidentEvent", 'String'>
    readonly message: FieldRef<"IncidentEvent", 'String'>
    readonly createdAt: FieldRef<"IncidentEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IncidentEvent findUnique
   */
  export type IncidentEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter, which IncidentEvent to fetch.
     */
    where: IncidentEventWhereUniqueInput
  }

  /**
   * IncidentEvent findUniqueOrThrow
   */
  export type IncidentEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter, which IncidentEvent to fetch.
     */
    where: IncidentEventWhereUniqueInput
  }

  /**
   * IncidentEvent findFirst
   */
  export type IncidentEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter, which IncidentEvent to fetch.
     */
    where?: IncidentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncidentEvents to fetch.
     */
    orderBy?: IncidentEventOrderByWithRelationInput | IncidentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IncidentEvents.
     */
    cursor?: IncidentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncidentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncidentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IncidentEvents.
     */
    distinct?: IncidentEventScalarFieldEnum | IncidentEventScalarFieldEnum[]
  }

  /**
   * IncidentEvent findFirstOrThrow
   */
  export type IncidentEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter, which IncidentEvent to fetch.
     */
    where?: IncidentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncidentEvents to fetch.
     */
    orderBy?: IncidentEventOrderByWithRelationInput | IncidentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IncidentEvents.
     */
    cursor?: IncidentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncidentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncidentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IncidentEvents.
     */
    distinct?: IncidentEventScalarFieldEnum | IncidentEventScalarFieldEnum[]
  }

  /**
   * IncidentEvent findMany
   */
  export type IncidentEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter, which IncidentEvents to fetch.
     */
    where?: IncidentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncidentEvents to fetch.
     */
    orderBy?: IncidentEventOrderByWithRelationInput | IncidentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IncidentEvents.
     */
    cursor?: IncidentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncidentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncidentEvents.
     */
    skip?: number
    distinct?: IncidentEventScalarFieldEnum | IncidentEventScalarFieldEnum[]
  }

  /**
   * IncidentEvent create
   */
  export type IncidentEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * The data needed to create a IncidentEvent.
     */
    data: XOR<IncidentEventCreateInput, IncidentEventUncheckedCreateInput>
  }

  /**
   * IncidentEvent createMany
   */
  export type IncidentEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IncidentEvents.
     */
    data: IncidentEventCreateManyInput | IncidentEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IncidentEvent createManyAndReturn
   */
  export type IncidentEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IncidentEvents.
     */
    data: IncidentEventCreateManyInput | IncidentEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IncidentEvent update
   */
  export type IncidentEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * The data needed to update a IncidentEvent.
     */
    data: XOR<IncidentEventUpdateInput, IncidentEventUncheckedUpdateInput>
    /**
     * Choose, which IncidentEvent to update.
     */
    where: IncidentEventWhereUniqueInput
  }

  /**
   * IncidentEvent updateMany
   */
  export type IncidentEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IncidentEvents.
     */
    data: XOR<IncidentEventUpdateManyMutationInput, IncidentEventUncheckedUpdateManyInput>
    /**
     * Filter which IncidentEvents to update
     */
    where?: IncidentEventWhereInput
  }

  /**
   * IncidentEvent upsert
   */
  export type IncidentEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * The filter to search for the IncidentEvent to update in case it exists.
     */
    where: IncidentEventWhereUniqueInput
    /**
     * In case the IncidentEvent found by the `where` argument doesn't exist, create a new IncidentEvent with this data.
     */
    create: XOR<IncidentEventCreateInput, IncidentEventUncheckedCreateInput>
    /**
     * In case the IncidentEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IncidentEventUpdateInput, IncidentEventUncheckedUpdateInput>
  }

  /**
   * IncidentEvent delete
   */
  export type IncidentEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
    /**
     * Filter which IncidentEvent to delete.
     */
    where: IncidentEventWhereUniqueInput
  }

  /**
   * IncidentEvent deleteMany
   */
  export type IncidentEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IncidentEvents to delete
     */
    where?: IncidentEventWhereInput
  }

  /**
   * IncidentEvent without action
   */
  export type IncidentEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IncidentEvent
     */
    select?: IncidentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IncidentEventInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    type: string | null
    subject: string | null
    content: string | null
    status: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    type: string | null
    subject: string | null
    content: string | null
    status: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    subject: number
    content: number
    recipients: number
    status: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    subject?: true
    content?: true
    status?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    subject?: true
    content?: true
    status?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    subject?: true
    content?: true
    recipients?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    type: string
    subject: string
    content: string
    recipients: string[]
    status: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    recipients?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    recipients?: boolean
    status?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    subject?: boolean
    content?: boolean
    recipients?: boolean
    status?: boolean
    createdAt?: boolean
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      subject: string
      content: string
      recipients: string[]
      status: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly subject: FieldRef<"Notification", 'String'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly recipients: FieldRef<"Notification", 'String[]'>
    readonly status: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: string
    key: string
    value: string
    createdAt: Date
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'String'>
    readonly key: FieldRef<"Setting", 'String'>
    readonly value: FieldRef<"Setting", 'String'>
    readonly createdAt: FieldRef<"Setting", 'DateTime'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Model EmailConfig
   */

  export type AggregateEmailConfig = {
    _count: EmailConfigCountAggregateOutputType | null
    _avg: EmailConfigAvgAggregateOutputType | null
    _sum: EmailConfigSumAggregateOutputType | null
    _min: EmailConfigMinAggregateOutputType | null
    _max: EmailConfigMaxAggregateOutputType | null
  }

  export type EmailConfigAvgAggregateOutputType = {
    throttleMinutes: number | null
  }

  export type EmailConfigSumAggregateOutputType = {
    throttleMinutes: number | null
  }

  export type EmailConfigMinAggregateOutputType = {
    id: string | null
    throttleMinutes: number | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailConfigMaxAggregateOutputType = {
    id: string | null
    throttleMinutes: number | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailConfigCountAggregateOutputType = {
    id: number
    recipients: number
    throttleMinutes: number
    enabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailConfigAvgAggregateInputType = {
    throttleMinutes?: true
  }

  export type EmailConfigSumAggregateInputType = {
    throttleMinutes?: true
  }

  export type EmailConfigMinAggregateInputType = {
    id?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailConfigMaxAggregateInputType = {
    id?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailConfigCountAggregateInputType = {
    id?: true
    recipients?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailConfig to aggregate.
     */
    where?: EmailConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConfigs to fetch.
     */
    orderBy?: EmailConfigOrderByWithRelationInput | EmailConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailConfigs
    **/
    _count?: true | EmailConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailConfigMaxAggregateInputType
  }

  export type GetEmailConfigAggregateType<T extends EmailConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailConfig[P]>
      : GetScalarType<T[P], AggregateEmailConfig[P]>
  }




  export type EmailConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailConfigWhereInput
    orderBy?: EmailConfigOrderByWithAggregationInput | EmailConfigOrderByWithAggregationInput[]
    by: EmailConfigScalarFieldEnum[] | EmailConfigScalarFieldEnum
    having?: EmailConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailConfigCountAggregateInputType | true
    _avg?: EmailConfigAvgAggregateInputType
    _sum?: EmailConfigSumAggregateInputType
    _min?: EmailConfigMinAggregateInputType
    _max?: EmailConfigMaxAggregateInputType
  }

  export type EmailConfigGroupByOutputType = {
    id: string
    recipients: string[]
    throttleMinutes: number
    enabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: EmailConfigCountAggregateOutputType | null
    _avg: EmailConfigAvgAggregateOutputType | null
    _sum: EmailConfigSumAggregateOutputType | null
    _min: EmailConfigMinAggregateOutputType | null
    _max: EmailConfigMaxAggregateOutputType | null
  }

  type GetEmailConfigGroupByPayload<T extends EmailConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailConfigGroupByOutputType[P]>
            : GetScalarType<T[P], EmailConfigGroupByOutputType[P]>
        }
      >
    >


  export type EmailConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipients?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailConfig"]>

  export type EmailConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipients?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailConfig"]>

  export type EmailConfigSelectScalar = {
    id?: boolean
    recipients?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $EmailConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      recipients: string[]
      throttleMinutes: number
      enabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailConfig"]>
    composites: {}
  }

  type EmailConfigGetPayload<S extends boolean | null | undefined | EmailConfigDefaultArgs> = $Result.GetResult<Prisma.$EmailConfigPayload, S>

  type EmailConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailConfigCountAggregateInputType | true
    }

  export interface EmailConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailConfig'], meta: { name: 'EmailConfig' } }
    /**
     * Find zero or one EmailConfig that matches the filter.
     * @param {EmailConfigFindUniqueArgs} args - Arguments to find a EmailConfig
     * @example
     * // Get one EmailConfig
     * const emailConfig = await prisma.emailConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailConfigFindUniqueArgs>(args: SelectSubset<T, EmailConfigFindUniqueArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmailConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmailConfigFindUniqueOrThrowArgs} args - Arguments to find a EmailConfig
     * @example
     * // Get one EmailConfig
     * const emailConfig = await prisma.emailConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmailConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigFindFirstArgs} args - Arguments to find a EmailConfig
     * @example
     * // Get one EmailConfig
     * const emailConfig = await prisma.emailConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailConfigFindFirstArgs>(args?: SelectSubset<T, EmailConfigFindFirstArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmailConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigFindFirstOrThrowArgs} args - Arguments to find a EmailConfig
     * @example
     * // Get one EmailConfig
     * const emailConfig = await prisma.emailConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmailConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailConfigs
     * const emailConfigs = await prisma.emailConfig.findMany()
     * 
     * // Get first 10 EmailConfigs
     * const emailConfigs = await prisma.emailConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailConfigWithIdOnly = await prisma.emailConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailConfigFindManyArgs>(args?: SelectSubset<T, EmailConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmailConfig.
     * @param {EmailConfigCreateArgs} args - Arguments to create a EmailConfig.
     * @example
     * // Create one EmailConfig
     * const EmailConfig = await prisma.emailConfig.create({
     *   data: {
     *     // ... data to create a EmailConfig
     *   }
     * })
     * 
     */
    create<T extends EmailConfigCreateArgs>(args: SelectSubset<T, EmailConfigCreateArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmailConfigs.
     * @param {EmailConfigCreateManyArgs} args - Arguments to create many EmailConfigs.
     * @example
     * // Create many EmailConfigs
     * const emailConfig = await prisma.emailConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailConfigCreateManyArgs>(args?: SelectSubset<T, EmailConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailConfigs and returns the data saved in the database.
     * @param {EmailConfigCreateManyAndReturnArgs} args - Arguments to create many EmailConfigs.
     * @example
     * // Create many EmailConfigs
     * const emailConfig = await prisma.emailConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailConfigs and only return the `id`
     * const emailConfigWithIdOnly = await prisma.emailConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmailConfig.
     * @param {EmailConfigDeleteArgs} args - Arguments to delete one EmailConfig.
     * @example
     * // Delete one EmailConfig
     * const EmailConfig = await prisma.emailConfig.delete({
     *   where: {
     *     // ... filter to delete one EmailConfig
     *   }
     * })
     * 
     */
    delete<T extends EmailConfigDeleteArgs>(args: SelectSubset<T, EmailConfigDeleteArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmailConfig.
     * @param {EmailConfigUpdateArgs} args - Arguments to update one EmailConfig.
     * @example
     * // Update one EmailConfig
     * const emailConfig = await prisma.emailConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailConfigUpdateArgs>(args: SelectSubset<T, EmailConfigUpdateArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmailConfigs.
     * @param {EmailConfigDeleteManyArgs} args - Arguments to filter EmailConfigs to delete.
     * @example
     * // Delete a few EmailConfigs
     * const { count } = await prisma.emailConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailConfigDeleteManyArgs>(args?: SelectSubset<T, EmailConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailConfigs
     * const emailConfig = await prisma.emailConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailConfigUpdateManyArgs>(args: SelectSubset<T, EmailConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailConfig.
     * @param {EmailConfigUpsertArgs} args - Arguments to update or create a EmailConfig.
     * @example
     * // Update or create a EmailConfig
     * const emailConfig = await prisma.emailConfig.upsert({
     *   create: {
     *     // ... data to create a EmailConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailConfig we want to update
     *   }
     * })
     */
    upsert<T extends EmailConfigUpsertArgs>(args: SelectSubset<T, EmailConfigUpsertArgs<ExtArgs>>): Prisma__EmailConfigClient<$Result.GetResult<Prisma.$EmailConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmailConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigCountArgs} args - Arguments to filter EmailConfigs to count.
     * @example
     * // Count the number of EmailConfigs
     * const count = await prisma.emailConfig.count({
     *   where: {
     *     // ... the filter for the EmailConfigs we want to count
     *   }
     * })
    **/
    count<T extends EmailConfigCountArgs>(
      args?: Subset<T, EmailConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailConfigAggregateArgs>(args: Subset<T, EmailConfigAggregateArgs>): Prisma.PrismaPromise<GetEmailConfigAggregateType<T>>

    /**
     * Group by EmailConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailConfigGroupByArgs['orderBy'] }
        : { orderBy?: EmailConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailConfig model
   */
  readonly fields: EmailConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailConfig model
   */ 
  interface EmailConfigFieldRefs {
    readonly id: FieldRef<"EmailConfig", 'String'>
    readonly recipients: FieldRef<"EmailConfig", 'String[]'>
    readonly throttleMinutes: FieldRef<"EmailConfig", 'Int'>
    readonly enabled: FieldRef<"EmailConfig", 'Boolean'>
    readonly createdAt: FieldRef<"EmailConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailConfig findUnique
   */
  export type EmailConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter, which EmailConfig to fetch.
     */
    where: EmailConfigWhereUniqueInput
  }

  /**
   * EmailConfig findUniqueOrThrow
   */
  export type EmailConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter, which EmailConfig to fetch.
     */
    where: EmailConfigWhereUniqueInput
  }

  /**
   * EmailConfig findFirst
   */
  export type EmailConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter, which EmailConfig to fetch.
     */
    where?: EmailConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConfigs to fetch.
     */
    orderBy?: EmailConfigOrderByWithRelationInput | EmailConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailConfigs.
     */
    cursor?: EmailConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailConfigs.
     */
    distinct?: EmailConfigScalarFieldEnum | EmailConfigScalarFieldEnum[]
  }

  /**
   * EmailConfig findFirstOrThrow
   */
  export type EmailConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter, which EmailConfig to fetch.
     */
    where?: EmailConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConfigs to fetch.
     */
    orderBy?: EmailConfigOrderByWithRelationInput | EmailConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailConfigs.
     */
    cursor?: EmailConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailConfigs.
     */
    distinct?: EmailConfigScalarFieldEnum | EmailConfigScalarFieldEnum[]
  }

  /**
   * EmailConfig findMany
   */
  export type EmailConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter, which EmailConfigs to fetch.
     */
    where?: EmailConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailConfigs to fetch.
     */
    orderBy?: EmailConfigOrderByWithRelationInput | EmailConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailConfigs.
     */
    cursor?: EmailConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailConfigs.
     */
    skip?: number
    distinct?: EmailConfigScalarFieldEnum | EmailConfigScalarFieldEnum[]
  }

  /**
   * EmailConfig create
   */
  export type EmailConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a EmailConfig.
     */
    data: XOR<EmailConfigCreateInput, EmailConfigUncheckedCreateInput>
  }

  /**
   * EmailConfig createMany
   */
  export type EmailConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailConfigs.
     */
    data: EmailConfigCreateManyInput | EmailConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailConfig createManyAndReturn
   */
  export type EmailConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmailConfigs.
     */
    data: EmailConfigCreateManyInput | EmailConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailConfig update
   */
  export type EmailConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a EmailConfig.
     */
    data: XOR<EmailConfigUpdateInput, EmailConfigUncheckedUpdateInput>
    /**
     * Choose, which EmailConfig to update.
     */
    where: EmailConfigWhereUniqueInput
  }

  /**
   * EmailConfig updateMany
   */
  export type EmailConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailConfigs.
     */
    data: XOR<EmailConfigUpdateManyMutationInput, EmailConfigUncheckedUpdateManyInput>
    /**
     * Filter which EmailConfigs to update
     */
    where?: EmailConfigWhereInput
  }

  /**
   * EmailConfig upsert
   */
  export type EmailConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the EmailConfig to update in case it exists.
     */
    where: EmailConfigWhereUniqueInput
    /**
     * In case the EmailConfig found by the `where` argument doesn't exist, create a new EmailConfig with this data.
     */
    create: XOR<EmailConfigCreateInput, EmailConfigUncheckedCreateInput>
    /**
     * In case the EmailConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailConfigUpdateInput, EmailConfigUncheckedUpdateInput>
  }

  /**
   * EmailConfig delete
   */
  export type EmailConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
    /**
     * Filter which EmailConfig to delete.
     */
    where: EmailConfigWhereUniqueInput
  }

  /**
   * EmailConfig deleteMany
   */
  export type EmailConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailConfigs to delete
     */
    where?: EmailConfigWhereInput
  }

  /**
   * EmailConfig without action
   */
  export type EmailConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailConfig
     */
    select?: EmailConfigSelect<ExtArgs> | null
  }


  /**
   * Model SlackConfig
   */

  export type AggregateSlackConfig = {
    _count: SlackConfigCountAggregateOutputType | null
    _avg: SlackConfigAvgAggregateOutputType | null
    _sum: SlackConfigSumAggregateOutputType | null
    _min: SlackConfigMinAggregateOutputType | null
    _max: SlackConfigMaxAggregateOutputType | null
  }

  export type SlackConfigAvgAggregateOutputType = {
    throttleMinutes: number | null
  }

  export type SlackConfigSumAggregateOutputType = {
    throttleMinutes: number | null
  }

  export type SlackConfigMinAggregateOutputType = {
    id: string | null
    webhookUrl: string | null
    channel: string | null
    throttleMinutes: number | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SlackConfigMaxAggregateOutputType = {
    id: string | null
    webhookUrl: string | null
    channel: string | null
    throttleMinutes: number | null
    enabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SlackConfigCountAggregateOutputType = {
    id: number
    webhookUrl: number
    channel: number
    throttleMinutes: number
    enabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SlackConfigAvgAggregateInputType = {
    throttleMinutes?: true
  }

  export type SlackConfigSumAggregateInputType = {
    throttleMinutes?: true
  }

  export type SlackConfigMinAggregateInputType = {
    id?: true
    webhookUrl?: true
    channel?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SlackConfigMaxAggregateInputType = {
    id?: true
    webhookUrl?: true
    channel?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SlackConfigCountAggregateInputType = {
    id?: true
    webhookUrl?: true
    channel?: true
    throttleMinutes?: true
    enabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SlackConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlackConfig to aggregate.
     */
    where?: SlackConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlackConfigs to fetch.
     */
    orderBy?: SlackConfigOrderByWithRelationInput | SlackConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SlackConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlackConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlackConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SlackConfigs
    **/
    _count?: true | SlackConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SlackConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SlackConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlackConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlackConfigMaxAggregateInputType
  }

  export type GetSlackConfigAggregateType<T extends SlackConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSlackConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlackConfig[P]>
      : GetScalarType<T[P], AggregateSlackConfig[P]>
  }




  export type SlackConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SlackConfigWhereInput
    orderBy?: SlackConfigOrderByWithAggregationInput | SlackConfigOrderByWithAggregationInput[]
    by: SlackConfigScalarFieldEnum[] | SlackConfigScalarFieldEnum
    having?: SlackConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlackConfigCountAggregateInputType | true
    _avg?: SlackConfigAvgAggregateInputType
    _sum?: SlackConfigSumAggregateInputType
    _min?: SlackConfigMinAggregateInputType
    _max?: SlackConfigMaxAggregateInputType
  }

  export type SlackConfigGroupByOutputType = {
    id: string
    webhookUrl: string
    channel: string | null
    throttleMinutes: number
    enabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: SlackConfigCountAggregateOutputType | null
    _avg: SlackConfigAvgAggregateOutputType | null
    _sum: SlackConfigSumAggregateOutputType | null
    _min: SlackConfigMinAggregateOutputType | null
    _max: SlackConfigMaxAggregateOutputType | null
  }

  type GetSlackConfigGroupByPayload<T extends SlackConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SlackConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlackConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlackConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SlackConfigGroupByOutputType[P]>
        }
      >
    >


  export type SlackConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    webhookUrl?: boolean
    channel?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["slackConfig"]>

  export type SlackConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    webhookUrl?: boolean
    channel?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["slackConfig"]>

  export type SlackConfigSelectScalar = {
    id?: boolean
    webhookUrl?: boolean
    channel?: boolean
    throttleMinutes?: boolean
    enabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SlackConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SlackConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      webhookUrl: string
      channel: string | null
      throttleMinutes: number
      enabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["slackConfig"]>
    composites: {}
  }

  type SlackConfigGetPayload<S extends boolean | null | undefined | SlackConfigDefaultArgs> = $Result.GetResult<Prisma.$SlackConfigPayload, S>

  type SlackConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SlackConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SlackConfigCountAggregateInputType | true
    }

  export interface SlackConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SlackConfig'], meta: { name: 'SlackConfig' } }
    /**
     * Find zero or one SlackConfig that matches the filter.
     * @param {SlackConfigFindUniqueArgs} args - Arguments to find a SlackConfig
     * @example
     * // Get one SlackConfig
     * const slackConfig = await prisma.slackConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SlackConfigFindUniqueArgs>(args: SelectSubset<T, SlackConfigFindUniqueArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SlackConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SlackConfigFindUniqueOrThrowArgs} args - Arguments to find a SlackConfig
     * @example
     * // Get one SlackConfig
     * const slackConfig = await prisma.slackConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SlackConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SlackConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SlackConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigFindFirstArgs} args - Arguments to find a SlackConfig
     * @example
     * // Get one SlackConfig
     * const slackConfig = await prisma.slackConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SlackConfigFindFirstArgs>(args?: SelectSubset<T, SlackConfigFindFirstArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SlackConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigFindFirstOrThrowArgs} args - Arguments to find a SlackConfig
     * @example
     * // Get one SlackConfig
     * const slackConfig = await prisma.slackConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SlackConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SlackConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SlackConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SlackConfigs
     * const slackConfigs = await prisma.slackConfig.findMany()
     * 
     * // Get first 10 SlackConfigs
     * const slackConfigs = await prisma.slackConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slackConfigWithIdOnly = await prisma.slackConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SlackConfigFindManyArgs>(args?: SelectSubset<T, SlackConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SlackConfig.
     * @param {SlackConfigCreateArgs} args - Arguments to create a SlackConfig.
     * @example
     * // Create one SlackConfig
     * const SlackConfig = await prisma.slackConfig.create({
     *   data: {
     *     // ... data to create a SlackConfig
     *   }
     * })
     * 
     */
    create<T extends SlackConfigCreateArgs>(args: SelectSubset<T, SlackConfigCreateArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SlackConfigs.
     * @param {SlackConfigCreateManyArgs} args - Arguments to create many SlackConfigs.
     * @example
     * // Create many SlackConfigs
     * const slackConfig = await prisma.slackConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SlackConfigCreateManyArgs>(args?: SelectSubset<T, SlackConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SlackConfigs and returns the data saved in the database.
     * @param {SlackConfigCreateManyAndReturnArgs} args - Arguments to create many SlackConfigs.
     * @example
     * // Create many SlackConfigs
     * const slackConfig = await prisma.slackConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SlackConfigs and only return the `id`
     * const slackConfigWithIdOnly = await prisma.slackConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SlackConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SlackConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SlackConfig.
     * @param {SlackConfigDeleteArgs} args - Arguments to delete one SlackConfig.
     * @example
     * // Delete one SlackConfig
     * const SlackConfig = await prisma.slackConfig.delete({
     *   where: {
     *     // ... filter to delete one SlackConfig
     *   }
     * })
     * 
     */
    delete<T extends SlackConfigDeleteArgs>(args: SelectSubset<T, SlackConfigDeleteArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SlackConfig.
     * @param {SlackConfigUpdateArgs} args - Arguments to update one SlackConfig.
     * @example
     * // Update one SlackConfig
     * const slackConfig = await prisma.slackConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SlackConfigUpdateArgs>(args: SelectSubset<T, SlackConfigUpdateArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SlackConfigs.
     * @param {SlackConfigDeleteManyArgs} args - Arguments to filter SlackConfigs to delete.
     * @example
     * // Delete a few SlackConfigs
     * const { count } = await prisma.slackConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SlackConfigDeleteManyArgs>(args?: SelectSubset<T, SlackConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SlackConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SlackConfigs
     * const slackConfig = await prisma.slackConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SlackConfigUpdateManyArgs>(args: SelectSubset<T, SlackConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SlackConfig.
     * @param {SlackConfigUpsertArgs} args - Arguments to update or create a SlackConfig.
     * @example
     * // Update or create a SlackConfig
     * const slackConfig = await prisma.slackConfig.upsert({
     *   create: {
     *     // ... data to create a SlackConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SlackConfig we want to update
     *   }
     * })
     */
    upsert<T extends SlackConfigUpsertArgs>(args: SelectSubset<T, SlackConfigUpsertArgs<ExtArgs>>): Prisma__SlackConfigClient<$Result.GetResult<Prisma.$SlackConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SlackConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigCountArgs} args - Arguments to filter SlackConfigs to count.
     * @example
     * // Count the number of SlackConfigs
     * const count = await prisma.slackConfig.count({
     *   where: {
     *     // ... the filter for the SlackConfigs we want to count
     *   }
     * })
    **/
    count<T extends SlackConfigCountArgs>(
      args?: Subset<T, SlackConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlackConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SlackConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlackConfigAggregateArgs>(args: Subset<T, SlackConfigAggregateArgs>): Prisma.PrismaPromise<GetSlackConfigAggregateType<T>>

    /**
     * Group by SlackConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlackConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SlackConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SlackConfigGroupByArgs['orderBy'] }
        : { orderBy?: SlackConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SlackConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlackConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SlackConfig model
   */
  readonly fields: SlackConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SlackConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SlackConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SlackConfig model
   */ 
  interface SlackConfigFieldRefs {
    readonly id: FieldRef<"SlackConfig", 'String'>
    readonly webhookUrl: FieldRef<"SlackConfig", 'String'>
    readonly channel: FieldRef<"SlackConfig", 'String'>
    readonly throttleMinutes: FieldRef<"SlackConfig", 'Int'>
    readonly enabled: FieldRef<"SlackConfig", 'Boolean'>
    readonly createdAt: FieldRef<"SlackConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SlackConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SlackConfig findUnique
   */
  export type SlackConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter, which SlackConfig to fetch.
     */
    where: SlackConfigWhereUniqueInput
  }

  /**
   * SlackConfig findUniqueOrThrow
   */
  export type SlackConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter, which SlackConfig to fetch.
     */
    where: SlackConfigWhereUniqueInput
  }

  /**
   * SlackConfig findFirst
   */
  export type SlackConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter, which SlackConfig to fetch.
     */
    where?: SlackConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlackConfigs to fetch.
     */
    orderBy?: SlackConfigOrderByWithRelationInput | SlackConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlackConfigs.
     */
    cursor?: SlackConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlackConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlackConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlackConfigs.
     */
    distinct?: SlackConfigScalarFieldEnum | SlackConfigScalarFieldEnum[]
  }

  /**
   * SlackConfig findFirstOrThrow
   */
  export type SlackConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter, which SlackConfig to fetch.
     */
    where?: SlackConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlackConfigs to fetch.
     */
    orderBy?: SlackConfigOrderByWithRelationInput | SlackConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlackConfigs.
     */
    cursor?: SlackConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlackConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlackConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlackConfigs.
     */
    distinct?: SlackConfigScalarFieldEnum | SlackConfigScalarFieldEnum[]
  }

  /**
   * SlackConfig findMany
   */
  export type SlackConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter, which SlackConfigs to fetch.
     */
    where?: SlackConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlackConfigs to fetch.
     */
    orderBy?: SlackConfigOrderByWithRelationInput | SlackConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SlackConfigs.
     */
    cursor?: SlackConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlackConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlackConfigs.
     */
    skip?: number
    distinct?: SlackConfigScalarFieldEnum | SlackConfigScalarFieldEnum[]
  }

  /**
   * SlackConfig create
   */
  export type SlackConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a SlackConfig.
     */
    data: XOR<SlackConfigCreateInput, SlackConfigUncheckedCreateInput>
  }

  /**
   * SlackConfig createMany
   */
  export type SlackConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SlackConfigs.
     */
    data: SlackConfigCreateManyInput | SlackConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SlackConfig createManyAndReturn
   */
  export type SlackConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SlackConfigs.
     */
    data: SlackConfigCreateManyInput | SlackConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SlackConfig update
   */
  export type SlackConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a SlackConfig.
     */
    data: XOR<SlackConfigUpdateInput, SlackConfigUncheckedUpdateInput>
    /**
     * Choose, which SlackConfig to update.
     */
    where: SlackConfigWhereUniqueInput
  }

  /**
   * SlackConfig updateMany
   */
  export type SlackConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SlackConfigs.
     */
    data: XOR<SlackConfigUpdateManyMutationInput, SlackConfigUncheckedUpdateManyInput>
    /**
     * Filter which SlackConfigs to update
     */
    where?: SlackConfigWhereInput
  }

  /**
   * SlackConfig upsert
   */
  export type SlackConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the SlackConfig to update in case it exists.
     */
    where: SlackConfigWhereUniqueInput
    /**
     * In case the SlackConfig found by the `where` argument doesn't exist, create a new SlackConfig with this data.
     */
    create: XOR<SlackConfigCreateInput, SlackConfigUncheckedCreateInput>
    /**
     * In case the SlackConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SlackConfigUpdateInput, SlackConfigUncheckedUpdateInput>
  }

  /**
   * SlackConfig delete
   */
  export type SlackConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
    /**
     * Filter which SlackConfig to delete.
     */
    where: SlackConfigWhereUniqueInput
  }

  /**
   * SlackConfig deleteMany
   */
  export type SlackConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlackConfigs to delete
     */
    where?: SlackConfigWhereInput
  }

  /**
   * SlackConfig without action
   */
  export type SlackConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlackConfig
     */
    select?: SlackConfigSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const HealthCheckScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    enabled: 'enabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    checkInterval: 'checkInterval',
    endpoint: 'endpoint',
    timeout: 'timeout',
    processKeyword: 'processKeyword',
    port: 'port',
    customCommand: 'customCommand',
    expectedOutput: 'expectedOutput',
    restartCommand: 'restartCommand',
    notifyOnFailure: 'notifyOnFailure'
  };

  export type HealthCheckScalarFieldEnum = (typeof HealthCheckScalarFieldEnum)[keyof typeof HealthCheckScalarFieldEnum]


  export const HealthCheckResultScalarFieldEnum: {
    id: 'id',
    healthCheckId: 'healthCheckId',
    status: 'status',
    details: 'details',
    memoryUsage: 'memoryUsage',
    cpuUsage: 'cpuUsage',
    responseTime: 'responseTime',
    createdAt: 'createdAt'
  };

  export type HealthCheckResultScalarFieldEnum = (typeof HealthCheckResultScalarFieldEnum)[keyof typeof HealthCheckResultScalarFieldEnum]


  export const IncidentScalarFieldEnum: {
    id: 'id',
    healthCheckId: 'healthCheckId',
    title: 'title',
    status: 'status',
    severity: 'severity',
    details: 'details',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    resolvedAt: 'resolvedAt'
  };

  export type IncidentScalarFieldEnum = (typeof IncidentScalarFieldEnum)[keyof typeof IncidentScalarFieldEnum]


  export const IncidentEventScalarFieldEnum: {
    id: 'id',
    incidentId: 'incidentId',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type IncidentEventScalarFieldEnum = (typeof IncidentEventScalarFieldEnum)[keyof typeof IncidentEventScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    subject: 'subject',
    content: 'content',
    recipients: 'recipients',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const EmailConfigScalarFieldEnum: {
    id: 'id',
    recipients: 'recipients',
    throttleMinutes: 'throttleMinutes',
    enabled: 'enabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailConfigScalarFieldEnum = (typeof EmailConfigScalarFieldEnum)[keyof typeof EmailConfigScalarFieldEnum]


  export const SlackConfigScalarFieldEnum: {
    id: 'id',
    webhookUrl: 'webhookUrl',
    channel: 'channel',
    throttleMinutes: 'throttleMinutes',
    enabled: 'enabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SlackConfigScalarFieldEnum = (typeof SlackConfigScalarFieldEnum)[keyof typeof SlackConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type HealthCheckWhereInput = {
    AND?: HealthCheckWhereInput | HealthCheckWhereInput[]
    OR?: HealthCheckWhereInput[]
    NOT?: HealthCheckWhereInput | HealthCheckWhereInput[]
    id?: StringFilter<"HealthCheck"> | string
    name?: StringFilter<"HealthCheck"> | string
    type?: StringFilter<"HealthCheck"> | string
    enabled?: BoolFilter<"HealthCheck"> | boolean
    createdAt?: DateTimeFilter<"HealthCheck"> | Date | string
    updatedAt?: DateTimeFilter<"HealthCheck"> | Date | string
    checkInterval?: IntFilter<"HealthCheck"> | number
    endpoint?: StringNullableFilter<"HealthCheck"> | string | null
    timeout?: IntNullableFilter<"HealthCheck"> | number | null
    processKeyword?: StringNullableFilter<"HealthCheck"> | string | null
    port?: IntNullableFilter<"HealthCheck"> | number | null
    customCommand?: StringNullableFilter<"HealthCheck"> | string | null
    expectedOutput?: StringNullableFilter<"HealthCheck"> | string | null
    restartCommand?: StringNullableFilter<"HealthCheck"> | string | null
    notifyOnFailure?: BoolFilter<"HealthCheck"> | boolean
    results?: HealthCheckResultListRelationFilter
    incidents?: IncidentListRelationFilter
  }

  export type HealthCheckOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkInterval?: SortOrder
    endpoint?: SortOrderInput | SortOrder
    timeout?: SortOrderInput | SortOrder
    processKeyword?: SortOrderInput | SortOrder
    port?: SortOrderInput | SortOrder
    customCommand?: SortOrderInput | SortOrder
    expectedOutput?: SortOrderInput | SortOrder
    restartCommand?: SortOrderInput | SortOrder
    notifyOnFailure?: SortOrder
    results?: HealthCheckResultOrderByRelationAggregateInput
    incidents?: IncidentOrderByRelationAggregateInput
  }

  export type HealthCheckWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HealthCheckWhereInput | HealthCheckWhereInput[]
    OR?: HealthCheckWhereInput[]
    NOT?: HealthCheckWhereInput | HealthCheckWhereInput[]
    name?: StringFilter<"HealthCheck"> | string
    type?: StringFilter<"HealthCheck"> | string
    enabled?: BoolFilter<"HealthCheck"> | boolean
    createdAt?: DateTimeFilter<"HealthCheck"> | Date | string
    updatedAt?: DateTimeFilter<"HealthCheck"> | Date | string
    checkInterval?: IntFilter<"HealthCheck"> | number
    endpoint?: StringNullableFilter<"HealthCheck"> | string | null
    timeout?: IntNullableFilter<"HealthCheck"> | number | null
    processKeyword?: StringNullableFilter<"HealthCheck"> | string | null
    port?: IntNullableFilter<"HealthCheck"> | number | null
    customCommand?: StringNullableFilter<"HealthCheck"> | string | null
    expectedOutput?: StringNullableFilter<"HealthCheck"> | string | null
    restartCommand?: StringNullableFilter<"HealthCheck"> | string | null
    notifyOnFailure?: BoolFilter<"HealthCheck"> | boolean
    results?: HealthCheckResultListRelationFilter
    incidents?: IncidentListRelationFilter
  }, "id">

  export type HealthCheckOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkInterval?: SortOrder
    endpoint?: SortOrderInput | SortOrder
    timeout?: SortOrderInput | SortOrder
    processKeyword?: SortOrderInput | SortOrder
    port?: SortOrderInput | SortOrder
    customCommand?: SortOrderInput | SortOrder
    expectedOutput?: SortOrderInput | SortOrder
    restartCommand?: SortOrderInput | SortOrder
    notifyOnFailure?: SortOrder
    _count?: HealthCheckCountOrderByAggregateInput
    _avg?: HealthCheckAvgOrderByAggregateInput
    _max?: HealthCheckMaxOrderByAggregateInput
    _min?: HealthCheckMinOrderByAggregateInput
    _sum?: HealthCheckSumOrderByAggregateInput
  }

  export type HealthCheckScalarWhereWithAggregatesInput = {
    AND?: HealthCheckScalarWhereWithAggregatesInput | HealthCheckScalarWhereWithAggregatesInput[]
    OR?: HealthCheckScalarWhereWithAggregatesInput[]
    NOT?: HealthCheckScalarWhereWithAggregatesInput | HealthCheckScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HealthCheck"> | string
    name?: StringWithAggregatesFilter<"HealthCheck"> | string
    type?: StringWithAggregatesFilter<"HealthCheck"> | string
    enabled?: BoolWithAggregatesFilter<"HealthCheck"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"HealthCheck"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HealthCheck"> | Date | string
    checkInterval?: IntWithAggregatesFilter<"HealthCheck"> | number
    endpoint?: StringNullableWithAggregatesFilter<"HealthCheck"> | string | null
    timeout?: IntNullableWithAggregatesFilter<"HealthCheck"> | number | null
    processKeyword?: StringNullableWithAggregatesFilter<"HealthCheck"> | string | null
    port?: IntNullableWithAggregatesFilter<"HealthCheck"> | number | null
    customCommand?: StringNullableWithAggregatesFilter<"HealthCheck"> | string | null
    expectedOutput?: StringNullableWithAggregatesFilter<"HealthCheck"> | string | null
    restartCommand?: StringNullableWithAggregatesFilter<"HealthCheck"> | string | null
    notifyOnFailure?: BoolWithAggregatesFilter<"HealthCheck"> | boolean
  }

  export type HealthCheckResultWhereInput = {
    AND?: HealthCheckResultWhereInput | HealthCheckResultWhereInput[]
    OR?: HealthCheckResultWhereInput[]
    NOT?: HealthCheckResultWhereInput | HealthCheckResultWhereInput[]
    id?: StringFilter<"HealthCheckResult"> | string
    healthCheckId?: StringFilter<"HealthCheckResult"> | string
    status?: StringFilter<"HealthCheckResult"> | string
    details?: StringNullableFilter<"HealthCheckResult"> | string | null
    memoryUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    cpuUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    responseTime?: IntNullableFilter<"HealthCheckResult"> | number | null
    createdAt?: DateTimeFilter<"HealthCheckResult"> | Date | string
    healthCheck?: XOR<HealthCheckRelationFilter, HealthCheckWhereInput>
  }

  export type HealthCheckResultOrderByWithRelationInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    status?: SortOrder
    details?: SortOrderInput | SortOrder
    memoryUsage?: SortOrderInput | SortOrder
    cpuUsage?: SortOrderInput | SortOrder
    responseTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    healthCheck?: HealthCheckOrderByWithRelationInput
  }

  export type HealthCheckResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HealthCheckResultWhereInput | HealthCheckResultWhereInput[]
    OR?: HealthCheckResultWhereInput[]
    NOT?: HealthCheckResultWhereInput | HealthCheckResultWhereInput[]
    healthCheckId?: StringFilter<"HealthCheckResult"> | string
    status?: StringFilter<"HealthCheckResult"> | string
    details?: StringNullableFilter<"HealthCheckResult"> | string | null
    memoryUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    cpuUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    responseTime?: IntNullableFilter<"HealthCheckResult"> | number | null
    createdAt?: DateTimeFilter<"HealthCheckResult"> | Date | string
    healthCheck?: XOR<HealthCheckRelationFilter, HealthCheckWhereInput>
  }, "id">

  export type HealthCheckResultOrderByWithAggregationInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    status?: SortOrder
    details?: SortOrderInput | SortOrder
    memoryUsage?: SortOrderInput | SortOrder
    cpuUsage?: SortOrderInput | SortOrder
    responseTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: HealthCheckResultCountOrderByAggregateInput
    _avg?: HealthCheckResultAvgOrderByAggregateInput
    _max?: HealthCheckResultMaxOrderByAggregateInput
    _min?: HealthCheckResultMinOrderByAggregateInput
    _sum?: HealthCheckResultSumOrderByAggregateInput
  }

  export type HealthCheckResultScalarWhereWithAggregatesInput = {
    AND?: HealthCheckResultScalarWhereWithAggregatesInput | HealthCheckResultScalarWhereWithAggregatesInput[]
    OR?: HealthCheckResultScalarWhereWithAggregatesInput[]
    NOT?: HealthCheckResultScalarWhereWithAggregatesInput | HealthCheckResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HealthCheckResult"> | string
    healthCheckId?: StringWithAggregatesFilter<"HealthCheckResult"> | string
    status?: StringWithAggregatesFilter<"HealthCheckResult"> | string
    details?: StringNullableWithAggregatesFilter<"HealthCheckResult"> | string | null
    memoryUsage?: FloatNullableWithAggregatesFilter<"HealthCheckResult"> | number | null
    cpuUsage?: FloatNullableWithAggregatesFilter<"HealthCheckResult"> | number | null
    responseTime?: IntNullableWithAggregatesFilter<"HealthCheckResult"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"HealthCheckResult"> | Date | string
  }

  export type IncidentWhereInput = {
    AND?: IncidentWhereInput | IncidentWhereInput[]
    OR?: IncidentWhereInput[]
    NOT?: IncidentWhereInput | IncidentWhereInput[]
    id?: StringFilter<"Incident"> | string
    healthCheckId?: StringFilter<"Incident"> | string
    title?: StringFilter<"Incident"> | string
    status?: StringFilter<"Incident"> | string
    severity?: StringFilter<"Incident"> | string
    details?: StringNullableFilter<"Incident"> | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    healthCheck?: XOR<HealthCheckRelationFilter, HealthCheckWhereInput>
    events?: IncidentEventListRelationFilter
  }

  export type IncidentOrderByWithRelationInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    healthCheck?: HealthCheckOrderByWithRelationInput
    events?: IncidentEventOrderByRelationAggregateInput
  }

  export type IncidentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IncidentWhereInput | IncidentWhereInput[]
    OR?: IncidentWhereInput[]
    NOT?: IncidentWhereInput | IncidentWhereInput[]
    healthCheckId?: StringFilter<"Incident"> | string
    title?: StringFilter<"Incident"> | string
    status?: StringFilter<"Incident"> | string
    severity?: StringFilter<"Incident"> | string
    details?: StringNullableFilter<"Incident"> | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
    healthCheck?: XOR<HealthCheckRelationFilter, HealthCheckWhereInput>
    events?: IncidentEventListRelationFilter
  }, "id">

  export type IncidentOrderByWithAggregationInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: IncidentCountOrderByAggregateInput
    _max?: IncidentMaxOrderByAggregateInput
    _min?: IncidentMinOrderByAggregateInput
  }

  export type IncidentScalarWhereWithAggregatesInput = {
    AND?: IncidentScalarWhereWithAggregatesInput | IncidentScalarWhereWithAggregatesInput[]
    OR?: IncidentScalarWhereWithAggregatesInput[]
    NOT?: IncidentScalarWhereWithAggregatesInput | IncidentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Incident"> | string
    healthCheckId?: StringWithAggregatesFilter<"Incident"> | string
    title?: StringWithAggregatesFilter<"Incident"> | string
    status?: StringWithAggregatesFilter<"Incident"> | string
    severity?: StringWithAggregatesFilter<"Incident"> | string
    details?: StringNullableWithAggregatesFilter<"Incident"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Incident"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Incident"> | Date | string | null
  }

  export type IncidentEventWhereInput = {
    AND?: IncidentEventWhereInput | IncidentEventWhereInput[]
    OR?: IncidentEventWhereInput[]
    NOT?: IncidentEventWhereInput | IncidentEventWhereInput[]
    id?: StringFilter<"IncidentEvent"> | string
    incidentId?: StringFilter<"IncidentEvent"> | string
    message?: StringFilter<"IncidentEvent"> | string
    createdAt?: DateTimeFilter<"IncidentEvent"> | Date | string
    incident?: XOR<IncidentRelationFilter, IncidentWhereInput>
  }

  export type IncidentEventOrderByWithRelationInput = {
    id?: SortOrder
    incidentId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    incident?: IncidentOrderByWithRelationInput
  }

  export type IncidentEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IncidentEventWhereInput | IncidentEventWhereInput[]
    OR?: IncidentEventWhereInput[]
    NOT?: IncidentEventWhereInput | IncidentEventWhereInput[]
    incidentId?: StringFilter<"IncidentEvent"> | string
    message?: StringFilter<"IncidentEvent"> | string
    createdAt?: DateTimeFilter<"IncidentEvent"> | Date | string
    incident?: XOR<IncidentRelationFilter, IncidentWhereInput>
  }, "id">

  export type IncidentEventOrderByWithAggregationInput = {
    id?: SortOrder
    incidentId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    _count?: IncidentEventCountOrderByAggregateInput
    _max?: IncidentEventMaxOrderByAggregateInput
    _min?: IncidentEventMinOrderByAggregateInput
  }

  export type IncidentEventScalarWhereWithAggregatesInput = {
    AND?: IncidentEventScalarWhereWithAggregatesInput | IncidentEventScalarWhereWithAggregatesInput[]
    OR?: IncidentEventScalarWhereWithAggregatesInput[]
    NOT?: IncidentEventScalarWhereWithAggregatesInput | IncidentEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IncidentEvent"> | string
    incidentId?: StringWithAggregatesFilter<"IncidentEvent"> | string
    message?: StringWithAggregatesFilter<"IncidentEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"IncidentEvent"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    subject?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    recipients?: StringNullableListFilter<"Notification">
    status?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    recipients?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: StringFilter<"Notification"> | string
    subject?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    recipients?: StringNullableListFilter<"Notification">
    status?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    recipients?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    subject?: StringWithAggregatesFilter<"Notification"> | string
    content?: StringWithAggregatesFilter<"Notification"> | string
    recipients?: StringNullableListFilter<"Notification">
    status?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: StringFilter<"Setting"> | string
    key?: StringFilter<"Setting"> | string
    value?: StringFilter<"Setting"> | string
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    value?: StringFilter<"Setting"> | string
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "id" | "key">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setting"> | string
    key?: StringWithAggregatesFilter<"Setting"> | string
    value?: StringWithAggregatesFilter<"Setting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type EmailConfigWhereInput = {
    AND?: EmailConfigWhereInput | EmailConfigWhereInput[]
    OR?: EmailConfigWhereInput[]
    NOT?: EmailConfigWhereInput | EmailConfigWhereInput[]
    id?: StringFilter<"EmailConfig"> | string
    recipients?: StringNullableListFilter<"EmailConfig">
    throttleMinutes?: IntFilter<"EmailConfig"> | number
    enabled?: BoolFilter<"EmailConfig"> | boolean
    createdAt?: DateTimeFilter<"EmailConfig"> | Date | string
    updatedAt?: DateTimeFilter<"EmailConfig"> | Date | string
  }

  export type EmailConfigOrderByWithRelationInput = {
    id?: SortOrder
    recipients?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailConfigWhereInput | EmailConfigWhereInput[]
    OR?: EmailConfigWhereInput[]
    NOT?: EmailConfigWhereInput | EmailConfigWhereInput[]
    recipients?: StringNullableListFilter<"EmailConfig">
    throttleMinutes?: IntFilter<"EmailConfig"> | number
    enabled?: BoolFilter<"EmailConfig"> | boolean
    createdAt?: DateTimeFilter<"EmailConfig"> | Date | string
    updatedAt?: DateTimeFilter<"EmailConfig"> | Date | string
  }, "id">

  export type EmailConfigOrderByWithAggregationInput = {
    id?: SortOrder
    recipients?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailConfigCountOrderByAggregateInput
    _avg?: EmailConfigAvgOrderByAggregateInput
    _max?: EmailConfigMaxOrderByAggregateInput
    _min?: EmailConfigMinOrderByAggregateInput
    _sum?: EmailConfigSumOrderByAggregateInput
  }

  export type EmailConfigScalarWhereWithAggregatesInput = {
    AND?: EmailConfigScalarWhereWithAggregatesInput | EmailConfigScalarWhereWithAggregatesInput[]
    OR?: EmailConfigScalarWhereWithAggregatesInput[]
    NOT?: EmailConfigScalarWhereWithAggregatesInput | EmailConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailConfig"> | string
    recipients?: StringNullableListFilter<"EmailConfig">
    throttleMinutes?: IntWithAggregatesFilter<"EmailConfig"> | number
    enabled?: BoolWithAggregatesFilter<"EmailConfig"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EmailConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailConfig"> | Date | string
  }

  export type SlackConfigWhereInput = {
    AND?: SlackConfigWhereInput | SlackConfigWhereInput[]
    OR?: SlackConfigWhereInput[]
    NOT?: SlackConfigWhereInput | SlackConfigWhereInput[]
    id?: StringFilter<"SlackConfig"> | string
    webhookUrl?: StringFilter<"SlackConfig"> | string
    channel?: StringNullableFilter<"SlackConfig"> | string | null
    throttleMinutes?: IntFilter<"SlackConfig"> | number
    enabled?: BoolFilter<"SlackConfig"> | boolean
    createdAt?: DateTimeFilter<"SlackConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SlackConfig"> | Date | string
  }

  export type SlackConfigOrderByWithRelationInput = {
    id?: SortOrder
    webhookUrl?: SortOrder
    channel?: SortOrderInput | SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SlackConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SlackConfigWhereInput | SlackConfigWhereInput[]
    OR?: SlackConfigWhereInput[]
    NOT?: SlackConfigWhereInput | SlackConfigWhereInput[]
    webhookUrl?: StringFilter<"SlackConfig"> | string
    channel?: StringNullableFilter<"SlackConfig"> | string | null
    throttleMinutes?: IntFilter<"SlackConfig"> | number
    enabled?: BoolFilter<"SlackConfig"> | boolean
    createdAt?: DateTimeFilter<"SlackConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SlackConfig"> | Date | string
  }, "id">

  export type SlackConfigOrderByWithAggregationInput = {
    id?: SortOrder
    webhookUrl?: SortOrder
    channel?: SortOrderInput | SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SlackConfigCountOrderByAggregateInput
    _avg?: SlackConfigAvgOrderByAggregateInput
    _max?: SlackConfigMaxOrderByAggregateInput
    _min?: SlackConfigMinOrderByAggregateInput
    _sum?: SlackConfigSumOrderByAggregateInput
  }

  export type SlackConfigScalarWhereWithAggregatesInput = {
    AND?: SlackConfigScalarWhereWithAggregatesInput | SlackConfigScalarWhereWithAggregatesInput[]
    OR?: SlackConfigScalarWhereWithAggregatesInput[]
    NOT?: SlackConfigScalarWhereWithAggregatesInput | SlackConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SlackConfig"> | string
    webhookUrl?: StringWithAggregatesFilter<"SlackConfig"> | string
    channel?: StringNullableWithAggregatesFilter<"SlackConfig"> | string | null
    throttleMinutes?: IntWithAggregatesFilter<"SlackConfig"> | number
    enabled?: BoolWithAggregatesFilter<"SlackConfig"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SlackConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SlackConfig"> | Date | string
  }

  export type HealthCheckCreateInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    results?: HealthCheckResultCreateNestedManyWithoutHealthCheckInput
    incidents?: IncidentCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    results?: HealthCheckResultUncheckedCreateNestedManyWithoutHealthCheckInput
    incidents?: IncidentUncheckedCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    results?: HealthCheckResultUpdateManyWithoutHealthCheckNestedInput
    incidents?: IncidentUpdateManyWithoutHealthCheckNestedInput
  }

  export type HealthCheckUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    results?: HealthCheckResultUncheckedUpdateManyWithoutHealthCheckNestedInput
    incidents?: IncidentUncheckedUpdateManyWithoutHealthCheckNestedInput
  }

  export type HealthCheckCreateManyInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
  }

  export type HealthCheckUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HealthCheckUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HealthCheckResultCreateInput = {
    id?: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
    healthCheck: HealthCheckCreateNestedOneWithoutResultsInput
  }

  export type HealthCheckResultUncheckedCreateInput = {
    id?: string
    healthCheckId: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type HealthCheckResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    healthCheck?: HealthCheckUpdateOneRequiredWithoutResultsNestedInput
  }

  export type HealthCheckResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    healthCheckId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCheckResultCreateManyInput = {
    id?: string
    healthCheckId: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type HealthCheckResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCheckResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    healthCheckId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentCreateInput = {
    id?: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    healthCheck: HealthCheckCreateNestedOneWithoutIncidentsInput
    events?: IncidentEventCreateNestedManyWithoutIncidentInput
  }

  export type IncidentUncheckedCreateInput = {
    id?: string
    healthCheckId: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    events?: IncidentEventUncheckedCreateNestedManyWithoutIncidentInput
  }

  export type IncidentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthCheck?: HealthCheckUpdateOneRequiredWithoutIncidentsNestedInput
    events?: IncidentEventUpdateManyWithoutIncidentNestedInput
  }

  export type IncidentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    healthCheckId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    events?: IncidentEventUncheckedUpdateManyWithoutIncidentNestedInput
  }

  export type IncidentCreateManyInput = {
    id?: string
    healthCheckId: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type IncidentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    healthCheckId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentEventCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    incident: IncidentCreateNestedOneWithoutEventsInput
  }

  export type IncidentEventUncheckedCreateInput = {
    id?: string
    incidentId: string
    message: string
    createdAt?: Date | string
  }

  export type IncidentEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incident?: IncidentUpdateOneRequiredWithoutEventsNestedInput
  }

  export type IncidentEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    incidentId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentEventCreateManyInput = {
    id?: string
    incidentId: string
    message: string
    createdAt?: Date | string
  }

  export type IncidentEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    incidentId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: string
    subject: string
    content: string
    recipients?: NotificationCreaterecipientsInput | string[]
    status: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    type: string
    subject: string
    content: string
    recipients?: NotificationCreaterecipientsInput | string[]
    status: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    recipients?: NotificationUpdaterecipientsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    recipients?: NotificationUpdaterecipientsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    type: string
    subject: string
    content: string
    recipients?: NotificationCreaterecipientsInput | string[]
    status: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    recipients?: NotificationUpdaterecipientsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    recipients?: NotificationUpdaterecipientsInput | string[]
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    id?: string
    key: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailConfigCreateInput = {
    id?: string
    recipients?: EmailConfigCreaterecipientsInput | string[]
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailConfigUncheckedCreateInput = {
    id?: string
    recipients?: EmailConfigCreaterecipientsInput | string[]
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipients?: EmailConfigUpdaterecipientsInput | string[]
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipients?: EmailConfigUpdaterecipientsInput | string[]
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailConfigCreateManyInput = {
    id?: string
    recipients?: EmailConfigCreaterecipientsInput | string[]
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipients?: EmailConfigUpdaterecipientsInput | string[]
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipients?: EmailConfigUpdaterecipientsInput | string[]
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlackConfigCreateInput = {
    id?: string
    webhookUrl: string
    channel?: string | null
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SlackConfigUncheckedCreateInput = {
    id?: string
    webhookUrl: string
    channel?: string | null
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SlackConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    webhookUrl?: StringFieldUpdateOperationsInput | string
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlackConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    webhookUrl?: StringFieldUpdateOperationsInput | string
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlackConfigCreateManyInput = {
    id?: string
    webhookUrl: string
    channel?: string | null
    throttleMinutes?: number
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SlackConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    webhookUrl?: StringFieldUpdateOperationsInput | string
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlackConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    webhookUrl?: StringFieldUpdateOperationsInput | string
    channel?: NullableStringFieldUpdateOperationsInput | string | null
    throttleMinutes?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type HealthCheckResultListRelationFilter = {
    every?: HealthCheckResultWhereInput
    some?: HealthCheckResultWhereInput
    none?: HealthCheckResultWhereInput
  }

  export type IncidentListRelationFilter = {
    every?: IncidentWhereInput
    some?: IncidentWhereInput
    none?: IncidentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HealthCheckResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IncidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HealthCheckCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkInterval?: SortOrder
    endpoint?: SortOrder
    timeout?: SortOrder
    processKeyword?: SortOrder
    port?: SortOrder
    customCommand?: SortOrder
    expectedOutput?: SortOrder
    restartCommand?: SortOrder
    notifyOnFailure?: SortOrder
  }

  export type HealthCheckAvgOrderByAggregateInput = {
    checkInterval?: SortOrder
    timeout?: SortOrder
    port?: SortOrder
  }

  export type HealthCheckMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkInterval?: SortOrder
    endpoint?: SortOrder
    timeout?: SortOrder
    processKeyword?: SortOrder
    port?: SortOrder
    customCommand?: SortOrder
    expectedOutput?: SortOrder
    restartCommand?: SortOrder
    notifyOnFailure?: SortOrder
  }

  export type HealthCheckMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    checkInterval?: SortOrder
    endpoint?: SortOrder
    timeout?: SortOrder
    processKeyword?: SortOrder
    port?: SortOrder
    customCommand?: SortOrder
    expectedOutput?: SortOrder
    restartCommand?: SortOrder
    notifyOnFailure?: SortOrder
  }

  export type HealthCheckSumOrderByAggregateInput = {
    checkInterval?: SortOrder
    timeout?: SortOrder
    port?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type HealthCheckRelationFilter = {
    is?: HealthCheckWhereInput
    isNot?: HealthCheckWhereInput
  }

  export type HealthCheckResultCountOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    status?: SortOrder
    details?: SortOrder
    memoryUsage?: SortOrder
    cpuUsage?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthCheckResultAvgOrderByAggregateInput = {
    memoryUsage?: SortOrder
    cpuUsage?: SortOrder
    responseTime?: SortOrder
  }

  export type HealthCheckResultMaxOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    status?: SortOrder
    details?: SortOrder
    memoryUsage?: SortOrder
    cpuUsage?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthCheckResultMinOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    status?: SortOrder
    details?: SortOrder
    memoryUsage?: SortOrder
    cpuUsage?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthCheckResultSumOrderByAggregateInput = {
    memoryUsage?: SortOrder
    cpuUsage?: SortOrder
    responseTime?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IncidentEventListRelationFilter = {
    every?: IncidentEventWhereInput
    some?: IncidentEventWhereInput
    none?: IncidentEventWhereInput
  }

  export type IncidentEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IncidentCountOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type IncidentMaxOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type IncidentMinOrderByAggregateInput = {
    id?: SortOrder
    healthCheckId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    severity?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IncidentRelationFilter = {
    is?: IncidentWhereInput
    isNot?: IncidentWhereInput
  }

  export type IncidentEventCountOrderByAggregateInput = {
    id?: SortOrder
    incidentId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type IncidentEventMaxOrderByAggregateInput = {
    id?: SortOrder
    incidentId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type IncidentEventMinOrderByAggregateInput = {
    id?: SortOrder
    incidentId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    recipients?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailConfigCountOrderByAggregateInput = {
    id?: SortOrder
    recipients?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailConfigAvgOrderByAggregateInput = {
    throttleMinutes?: SortOrder
  }

  export type EmailConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailConfigMinOrderByAggregateInput = {
    id?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailConfigSumOrderByAggregateInput = {
    throttleMinutes?: SortOrder
  }

  export type SlackConfigCountOrderByAggregateInput = {
    id?: SortOrder
    webhookUrl?: SortOrder
    channel?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SlackConfigAvgOrderByAggregateInput = {
    throttleMinutes?: SortOrder
  }

  export type SlackConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    webhookUrl?: SortOrder
    channel?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SlackConfigMinOrderByAggregateInput = {
    id?: SortOrder
    webhookUrl?: SortOrder
    channel?: SortOrder
    throttleMinutes?: SortOrder
    enabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SlackConfigSumOrderByAggregateInput = {
    throttleMinutes?: SortOrder
  }

  export type HealthCheckResultCreateNestedManyWithoutHealthCheckInput = {
    create?: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput> | HealthCheckResultCreateWithoutHealthCheckInput[] | HealthCheckResultUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: HealthCheckResultCreateOrConnectWithoutHealthCheckInput | HealthCheckResultCreateOrConnectWithoutHealthCheckInput[]
    createMany?: HealthCheckResultCreateManyHealthCheckInputEnvelope
    connect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
  }

  export type IncidentCreateNestedManyWithoutHealthCheckInput = {
    create?: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput> | IncidentCreateWithoutHealthCheckInput[] | IncidentUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutHealthCheckInput | IncidentCreateOrConnectWithoutHealthCheckInput[]
    createMany?: IncidentCreateManyHealthCheckInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type HealthCheckResultUncheckedCreateNestedManyWithoutHealthCheckInput = {
    create?: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput> | HealthCheckResultCreateWithoutHealthCheckInput[] | HealthCheckResultUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: HealthCheckResultCreateOrConnectWithoutHealthCheckInput | HealthCheckResultCreateOrConnectWithoutHealthCheckInput[]
    createMany?: HealthCheckResultCreateManyHealthCheckInputEnvelope
    connect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
  }

  export type IncidentUncheckedCreateNestedManyWithoutHealthCheckInput = {
    create?: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput> | IncidentCreateWithoutHealthCheckInput[] | IncidentUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutHealthCheckInput | IncidentCreateOrConnectWithoutHealthCheckInput[]
    createMany?: IncidentCreateManyHealthCheckInputEnvelope
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HealthCheckResultUpdateManyWithoutHealthCheckNestedInput = {
    create?: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput> | HealthCheckResultCreateWithoutHealthCheckInput[] | HealthCheckResultUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: HealthCheckResultCreateOrConnectWithoutHealthCheckInput | HealthCheckResultCreateOrConnectWithoutHealthCheckInput[]
    upsert?: HealthCheckResultUpsertWithWhereUniqueWithoutHealthCheckInput | HealthCheckResultUpsertWithWhereUniqueWithoutHealthCheckInput[]
    createMany?: HealthCheckResultCreateManyHealthCheckInputEnvelope
    set?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    disconnect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    delete?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    connect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    update?: HealthCheckResultUpdateWithWhereUniqueWithoutHealthCheckInput | HealthCheckResultUpdateWithWhereUniqueWithoutHealthCheckInput[]
    updateMany?: HealthCheckResultUpdateManyWithWhereWithoutHealthCheckInput | HealthCheckResultUpdateManyWithWhereWithoutHealthCheckInput[]
    deleteMany?: HealthCheckResultScalarWhereInput | HealthCheckResultScalarWhereInput[]
  }

  export type IncidentUpdateManyWithoutHealthCheckNestedInput = {
    create?: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput> | IncidentCreateWithoutHealthCheckInput[] | IncidentUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutHealthCheckInput | IncidentCreateOrConnectWithoutHealthCheckInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutHealthCheckInput | IncidentUpsertWithWhereUniqueWithoutHealthCheckInput[]
    createMany?: IncidentCreateManyHealthCheckInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutHealthCheckInput | IncidentUpdateWithWhereUniqueWithoutHealthCheckInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutHealthCheckInput | IncidentUpdateManyWithWhereWithoutHealthCheckInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type HealthCheckResultUncheckedUpdateManyWithoutHealthCheckNestedInput = {
    create?: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput> | HealthCheckResultCreateWithoutHealthCheckInput[] | HealthCheckResultUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: HealthCheckResultCreateOrConnectWithoutHealthCheckInput | HealthCheckResultCreateOrConnectWithoutHealthCheckInput[]
    upsert?: HealthCheckResultUpsertWithWhereUniqueWithoutHealthCheckInput | HealthCheckResultUpsertWithWhereUniqueWithoutHealthCheckInput[]
    createMany?: HealthCheckResultCreateManyHealthCheckInputEnvelope
    set?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    disconnect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    delete?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    connect?: HealthCheckResultWhereUniqueInput | HealthCheckResultWhereUniqueInput[]
    update?: HealthCheckResultUpdateWithWhereUniqueWithoutHealthCheckInput | HealthCheckResultUpdateWithWhereUniqueWithoutHealthCheckInput[]
    updateMany?: HealthCheckResultUpdateManyWithWhereWithoutHealthCheckInput | HealthCheckResultUpdateManyWithWhereWithoutHealthCheckInput[]
    deleteMany?: HealthCheckResultScalarWhereInput | HealthCheckResultScalarWhereInput[]
  }

  export type IncidentUncheckedUpdateManyWithoutHealthCheckNestedInput = {
    create?: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput> | IncidentCreateWithoutHealthCheckInput[] | IncidentUncheckedCreateWithoutHealthCheckInput[]
    connectOrCreate?: IncidentCreateOrConnectWithoutHealthCheckInput | IncidentCreateOrConnectWithoutHealthCheckInput[]
    upsert?: IncidentUpsertWithWhereUniqueWithoutHealthCheckInput | IncidentUpsertWithWhereUniqueWithoutHealthCheckInput[]
    createMany?: IncidentCreateManyHealthCheckInputEnvelope
    set?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    disconnect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    delete?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    connect?: IncidentWhereUniqueInput | IncidentWhereUniqueInput[]
    update?: IncidentUpdateWithWhereUniqueWithoutHealthCheckInput | IncidentUpdateWithWhereUniqueWithoutHealthCheckInput[]
    updateMany?: IncidentUpdateManyWithWhereWithoutHealthCheckInput | IncidentUpdateManyWithWhereWithoutHealthCheckInput[]
    deleteMany?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
  }

  export type HealthCheckCreateNestedOneWithoutResultsInput = {
    create?: XOR<HealthCheckCreateWithoutResultsInput, HealthCheckUncheckedCreateWithoutResultsInput>
    connectOrCreate?: HealthCheckCreateOrConnectWithoutResultsInput
    connect?: HealthCheckWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HealthCheckUpdateOneRequiredWithoutResultsNestedInput = {
    create?: XOR<HealthCheckCreateWithoutResultsInput, HealthCheckUncheckedCreateWithoutResultsInput>
    connectOrCreate?: HealthCheckCreateOrConnectWithoutResultsInput
    upsert?: HealthCheckUpsertWithoutResultsInput
    connect?: HealthCheckWhereUniqueInput
    update?: XOR<XOR<HealthCheckUpdateToOneWithWhereWithoutResultsInput, HealthCheckUpdateWithoutResultsInput>, HealthCheckUncheckedUpdateWithoutResultsInput>
  }

  export type HealthCheckCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<HealthCheckCreateWithoutIncidentsInput, HealthCheckUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: HealthCheckCreateOrConnectWithoutIncidentsInput
    connect?: HealthCheckWhereUniqueInput
  }

  export type IncidentEventCreateNestedManyWithoutIncidentInput = {
    create?: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput> | IncidentEventCreateWithoutIncidentInput[] | IncidentEventUncheckedCreateWithoutIncidentInput[]
    connectOrCreate?: IncidentEventCreateOrConnectWithoutIncidentInput | IncidentEventCreateOrConnectWithoutIncidentInput[]
    createMany?: IncidentEventCreateManyIncidentInputEnvelope
    connect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
  }

  export type IncidentEventUncheckedCreateNestedManyWithoutIncidentInput = {
    create?: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput> | IncidentEventCreateWithoutIncidentInput[] | IncidentEventUncheckedCreateWithoutIncidentInput[]
    connectOrCreate?: IncidentEventCreateOrConnectWithoutIncidentInput | IncidentEventCreateOrConnectWithoutIncidentInput[]
    createMany?: IncidentEventCreateManyIncidentInputEnvelope
    connect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type HealthCheckUpdateOneRequiredWithoutIncidentsNestedInput = {
    create?: XOR<HealthCheckCreateWithoutIncidentsInput, HealthCheckUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: HealthCheckCreateOrConnectWithoutIncidentsInput
    upsert?: HealthCheckUpsertWithoutIncidentsInput
    connect?: HealthCheckWhereUniqueInput
    update?: XOR<XOR<HealthCheckUpdateToOneWithWhereWithoutIncidentsInput, HealthCheckUpdateWithoutIncidentsInput>, HealthCheckUncheckedUpdateWithoutIncidentsInput>
  }

  export type IncidentEventUpdateManyWithoutIncidentNestedInput = {
    create?: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput> | IncidentEventCreateWithoutIncidentInput[] | IncidentEventUncheckedCreateWithoutIncidentInput[]
    connectOrCreate?: IncidentEventCreateOrConnectWithoutIncidentInput | IncidentEventCreateOrConnectWithoutIncidentInput[]
    upsert?: IncidentEventUpsertWithWhereUniqueWithoutIncidentInput | IncidentEventUpsertWithWhereUniqueWithoutIncidentInput[]
    createMany?: IncidentEventCreateManyIncidentInputEnvelope
    set?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    disconnect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    delete?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    connect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    update?: IncidentEventUpdateWithWhereUniqueWithoutIncidentInput | IncidentEventUpdateWithWhereUniqueWithoutIncidentInput[]
    updateMany?: IncidentEventUpdateManyWithWhereWithoutIncidentInput | IncidentEventUpdateManyWithWhereWithoutIncidentInput[]
    deleteMany?: IncidentEventScalarWhereInput | IncidentEventScalarWhereInput[]
  }

  export type IncidentEventUncheckedUpdateManyWithoutIncidentNestedInput = {
    create?: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput> | IncidentEventCreateWithoutIncidentInput[] | IncidentEventUncheckedCreateWithoutIncidentInput[]
    connectOrCreate?: IncidentEventCreateOrConnectWithoutIncidentInput | IncidentEventCreateOrConnectWithoutIncidentInput[]
    upsert?: IncidentEventUpsertWithWhereUniqueWithoutIncidentInput | IncidentEventUpsertWithWhereUniqueWithoutIncidentInput[]
    createMany?: IncidentEventCreateManyIncidentInputEnvelope
    set?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    disconnect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    delete?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    connect?: IncidentEventWhereUniqueInput | IncidentEventWhereUniqueInput[]
    update?: IncidentEventUpdateWithWhereUniqueWithoutIncidentInput | IncidentEventUpdateWithWhereUniqueWithoutIncidentInput[]
    updateMany?: IncidentEventUpdateManyWithWhereWithoutIncidentInput | IncidentEventUpdateManyWithWhereWithoutIncidentInput[]
    deleteMany?: IncidentEventScalarWhereInput | IncidentEventScalarWhereInput[]
  }

  export type IncidentCreateNestedOneWithoutEventsInput = {
    create?: XOR<IncidentCreateWithoutEventsInput, IncidentUncheckedCreateWithoutEventsInput>
    connectOrCreate?: IncidentCreateOrConnectWithoutEventsInput
    connect?: IncidentWhereUniqueInput
  }

  export type IncidentUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<IncidentCreateWithoutEventsInput, IncidentUncheckedCreateWithoutEventsInput>
    connectOrCreate?: IncidentCreateOrConnectWithoutEventsInput
    upsert?: IncidentUpsertWithoutEventsInput
    connect?: IncidentWhereUniqueInput
    update?: XOR<XOR<IncidentUpdateToOneWithWhereWithoutEventsInput, IncidentUpdateWithoutEventsInput>, IncidentUncheckedUpdateWithoutEventsInput>
  }

  export type NotificationCreaterecipientsInput = {
    set: string[]
  }

  export type NotificationUpdaterecipientsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailConfigCreaterecipientsInput = {
    set: string[]
  }

  export type EmailConfigUpdaterecipientsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type HealthCheckResultCreateWithoutHealthCheckInput = {
    id?: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type HealthCheckResultUncheckedCreateWithoutHealthCheckInput = {
    id?: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type HealthCheckResultCreateOrConnectWithoutHealthCheckInput = {
    where: HealthCheckResultWhereUniqueInput
    create: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput>
  }

  export type HealthCheckResultCreateManyHealthCheckInputEnvelope = {
    data: HealthCheckResultCreateManyHealthCheckInput | HealthCheckResultCreateManyHealthCheckInput[]
    skipDuplicates?: boolean
  }

  export type IncidentCreateWithoutHealthCheckInput = {
    id?: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    events?: IncidentEventCreateNestedManyWithoutIncidentInput
  }

  export type IncidentUncheckedCreateWithoutHealthCheckInput = {
    id?: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    events?: IncidentEventUncheckedCreateNestedManyWithoutIncidentInput
  }

  export type IncidentCreateOrConnectWithoutHealthCheckInput = {
    where: IncidentWhereUniqueInput
    create: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput>
  }

  export type IncidentCreateManyHealthCheckInputEnvelope = {
    data: IncidentCreateManyHealthCheckInput | IncidentCreateManyHealthCheckInput[]
    skipDuplicates?: boolean
  }

  export type HealthCheckResultUpsertWithWhereUniqueWithoutHealthCheckInput = {
    where: HealthCheckResultWhereUniqueInput
    update: XOR<HealthCheckResultUpdateWithoutHealthCheckInput, HealthCheckResultUncheckedUpdateWithoutHealthCheckInput>
    create: XOR<HealthCheckResultCreateWithoutHealthCheckInput, HealthCheckResultUncheckedCreateWithoutHealthCheckInput>
  }

  export type HealthCheckResultUpdateWithWhereUniqueWithoutHealthCheckInput = {
    where: HealthCheckResultWhereUniqueInput
    data: XOR<HealthCheckResultUpdateWithoutHealthCheckInput, HealthCheckResultUncheckedUpdateWithoutHealthCheckInput>
  }

  export type HealthCheckResultUpdateManyWithWhereWithoutHealthCheckInput = {
    where: HealthCheckResultScalarWhereInput
    data: XOR<HealthCheckResultUpdateManyMutationInput, HealthCheckResultUncheckedUpdateManyWithoutHealthCheckInput>
  }

  export type HealthCheckResultScalarWhereInput = {
    AND?: HealthCheckResultScalarWhereInput | HealthCheckResultScalarWhereInput[]
    OR?: HealthCheckResultScalarWhereInput[]
    NOT?: HealthCheckResultScalarWhereInput | HealthCheckResultScalarWhereInput[]
    id?: StringFilter<"HealthCheckResult"> | string
    healthCheckId?: StringFilter<"HealthCheckResult"> | string
    status?: StringFilter<"HealthCheckResult"> | string
    details?: StringNullableFilter<"HealthCheckResult"> | string | null
    memoryUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    cpuUsage?: FloatNullableFilter<"HealthCheckResult"> | number | null
    responseTime?: IntNullableFilter<"HealthCheckResult"> | number | null
    createdAt?: DateTimeFilter<"HealthCheckResult"> | Date | string
  }

  export type IncidentUpsertWithWhereUniqueWithoutHealthCheckInput = {
    where: IncidentWhereUniqueInput
    update: XOR<IncidentUpdateWithoutHealthCheckInput, IncidentUncheckedUpdateWithoutHealthCheckInput>
    create: XOR<IncidentCreateWithoutHealthCheckInput, IncidentUncheckedCreateWithoutHealthCheckInput>
  }

  export type IncidentUpdateWithWhereUniqueWithoutHealthCheckInput = {
    where: IncidentWhereUniqueInput
    data: XOR<IncidentUpdateWithoutHealthCheckInput, IncidentUncheckedUpdateWithoutHealthCheckInput>
  }

  export type IncidentUpdateManyWithWhereWithoutHealthCheckInput = {
    where: IncidentScalarWhereInput
    data: XOR<IncidentUpdateManyMutationInput, IncidentUncheckedUpdateManyWithoutHealthCheckInput>
  }

  export type IncidentScalarWhereInput = {
    AND?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
    OR?: IncidentScalarWhereInput[]
    NOT?: IncidentScalarWhereInput | IncidentScalarWhereInput[]
    id?: StringFilter<"Incident"> | string
    healthCheckId?: StringFilter<"Incident"> | string
    title?: StringFilter<"Incident"> | string
    status?: StringFilter<"Incident"> | string
    severity?: StringFilter<"Incident"> | string
    details?: StringNullableFilter<"Incident"> | string | null
    createdAt?: DateTimeFilter<"Incident"> | Date | string
    updatedAt?: DateTimeFilter<"Incident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Incident"> | Date | string | null
  }

  export type HealthCheckCreateWithoutResultsInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    incidents?: IncidentCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckUncheckedCreateWithoutResultsInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    incidents?: IncidentUncheckedCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckCreateOrConnectWithoutResultsInput = {
    where: HealthCheckWhereUniqueInput
    create: XOR<HealthCheckCreateWithoutResultsInput, HealthCheckUncheckedCreateWithoutResultsInput>
  }

  export type HealthCheckUpsertWithoutResultsInput = {
    update: XOR<HealthCheckUpdateWithoutResultsInput, HealthCheckUncheckedUpdateWithoutResultsInput>
    create: XOR<HealthCheckCreateWithoutResultsInput, HealthCheckUncheckedCreateWithoutResultsInput>
    where?: HealthCheckWhereInput
  }

  export type HealthCheckUpdateToOneWithWhereWithoutResultsInput = {
    where?: HealthCheckWhereInput
    data: XOR<HealthCheckUpdateWithoutResultsInput, HealthCheckUncheckedUpdateWithoutResultsInput>
  }

  export type HealthCheckUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    incidents?: IncidentUpdateManyWithoutHealthCheckNestedInput
  }

  export type HealthCheckUncheckedUpdateWithoutResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    incidents?: IncidentUncheckedUpdateManyWithoutHealthCheckNestedInput
  }

  export type HealthCheckCreateWithoutIncidentsInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    results?: HealthCheckResultCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckUncheckedCreateWithoutIncidentsInput = {
    id?: string
    name: string
    type: string
    enabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    checkInterval?: number
    endpoint?: string | null
    timeout?: number | null
    processKeyword?: string | null
    port?: number | null
    customCommand?: string | null
    expectedOutput?: string | null
    restartCommand?: string | null
    notifyOnFailure?: boolean
    results?: HealthCheckResultUncheckedCreateNestedManyWithoutHealthCheckInput
  }

  export type HealthCheckCreateOrConnectWithoutIncidentsInput = {
    where: HealthCheckWhereUniqueInput
    create: XOR<HealthCheckCreateWithoutIncidentsInput, HealthCheckUncheckedCreateWithoutIncidentsInput>
  }

  export type IncidentEventCreateWithoutIncidentInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type IncidentEventUncheckedCreateWithoutIncidentInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type IncidentEventCreateOrConnectWithoutIncidentInput = {
    where: IncidentEventWhereUniqueInput
    create: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput>
  }

  export type IncidentEventCreateManyIncidentInputEnvelope = {
    data: IncidentEventCreateManyIncidentInput | IncidentEventCreateManyIncidentInput[]
    skipDuplicates?: boolean
  }

  export type HealthCheckUpsertWithoutIncidentsInput = {
    update: XOR<HealthCheckUpdateWithoutIncidentsInput, HealthCheckUncheckedUpdateWithoutIncidentsInput>
    create: XOR<HealthCheckCreateWithoutIncidentsInput, HealthCheckUncheckedCreateWithoutIncidentsInput>
    where?: HealthCheckWhereInput
  }

  export type HealthCheckUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: HealthCheckWhereInput
    data: XOR<HealthCheckUpdateWithoutIncidentsInput, HealthCheckUncheckedUpdateWithoutIncidentsInput>
  }

  export type HealthCheckUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    results?: HealthCheckResultUpdateManyWithoutHealthCheckNestedInput
  }

  export type HealthCheckUncheckedUpdateWithoutIncidentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInterval?: IntFieldUpdateOperationsInput | number
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    timeout?: NullableIntFieldUpdateOperationsInput | number | null
    processKeyword?: NullableStringFieldUpdateOperationsInput | string | null
    port?: NullableIntFieldUpdateOperationsInput | number | null
    customCommand?: NullableStringFieldUpdateOperationsInput | string | null
    expectedOutput?: NullableStringFieldUpdateOperationsInput | string | null
    restartCommand?: NullableStringFieldUpdateOperationsInput | string | null
    notifyOnFailure?: BoolFieldUpdateOperationsInput | boolean
    results?: HealthCheckResultUncheckedUpdateManyWithoutHealthCheckNestedInput
  }

  export type IncidentEventUpsertWithWhereUniqueWithoutIncidentInput = {
    where: IncidentEventWhereUniqueInput
    update: XOR<IncidentEventUpdateWithoutIncidentInput, IncidentEventUncheckedUpdateWithoutIncidentInput>
    create: XOR<IncidentEventCreateWithoutIncidentInput, IncidentEventUncheckedCreateWithoutIncidentInput>
  }

  export type IncidentEventUpdateWithWhereUniqueWithoutIncidentInput = {
    where: IncidentEventWhereUniqueInput
    data: XOR<IncidentEventUpdateWithoutIncidentInput, IncidentEventUncheckedUpdateWithoutIncidentInput>
  }

  export type IncidentEventUpdateManyWithWhereWithoutIncidentInput = {
    where: IncidentEventScalarWhereInput
    data: XOR<IncidentEventUpdateManyMutationInput, IncidentEventUncheckedUpdateManyWithoutIncidentInput>
  }

  export type IncidentEventScalarWhereInput = {
    AND?: IncidentEventScalarWhereInput | IncidentEventScalarWhereInput[]
    OR?: IncidentEventScalarWhereInput[]
    NOT?: IncidentEventScalarWhereInput | IncidentEventScalarWhereInput[]
    id?: StringFilter<"IncidentEvent"> | string
    incidentId?: StringFilter<"IncidentEvent"> | string
    message?: StringFilter<"IncidentEvent"> | string
    createdAt?: DateTimeFilter<"IncidentEvent"> | Date | string
  }

  export type IncidentCreateWithoutEventsInput = {
    id?: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    healthCheck: HealthCheckCreateNestedOneWithoutIncidentsInput
  }

  export type IncidentUncheckedCreateWithoutEventsInput = {
    id?: string
    healthCheckId: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type IncidentCreateOrConnectWithoutEventsInput = {
    where: IncidentWhereUniqueInput
    create: XOR<IncidentCreateWithoutEventsInput, IncidentUncheckedCreateWithoutEventsInput>
  }

  export type IncidentUpsertWithoutEventsInput = {
    update: XOR<IncidentUpdateWithoutEventsInput, IncidentUncheckedUpdateWithoutEventsInput>
    create: XOR<IncidentCreateWithoutEventsInput, IncidentUncheckedCreateWithoutEventsInput>
    where?: IncidentWhereInput
  }

  export type IncidentUpdateToOneWithWhereWithoutEventsInput = {
    where?: IncidentWhereInput
    data: XOR<IncidentUpdateWithoutEventsInput, IncidentUncheckedUpdateWithoutEventsInput>
  }

  export type IncidentUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthCheck?: HealthCheckUpdateOneRequiredWithoutIncidentsNestedInput
  }

  export type IncidentUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    healthCheckId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type HealthCheckResultCreateManyHealthCheckInput = {
    id?: string
    status: string
    details?: string | null
    memoryUsage?: number | null
    cpuUsage?: number | null
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type IncidentCreateManyHealthCheckInput = {
    id?: string
    title: string
    status: string
    severity: string
    details?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type HealthCheckResultUpdateWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCheckResultUncheckedUpdateWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthCheckResultUncheckedUpdateManyWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    memoryUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    cpuUsage?: NullableFloatFieldUpdateOperationsInput | number | null
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentUpdateWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    events?: IncidentEventUpdateManyWithoutIncidentNestedInput
  }

  export type IncidentUncheckedUpdateWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    events?: IncidentEventUncheckedUpdateManyWithoutIncidentNestedInput
  }

  export type IncidentUncheckedUpdateManyWithoutHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IncidentEventCreateManyIncidentInput = {
    id?: string
    message: string
    createdAt?: Date | string
  }

  export type IncidentEventUpdateWithoutIncidentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentEventUncheckedUpdateWithoutIncidentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IncidentEventUncheckedUpdateManyWithoutIncidentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use HealthCheckCountOutputTypeDefaultArgs instead
     */
    export type HealthCheckCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HealthCheckCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IncidentCountOutputTypeDefaultArgs instead
     */
    export type IncidentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IncidentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HealthCheckDefaultArgs instead
     */
    export type HealthCheckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HealthCheckDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HealthCheckResultDefaultArgs instead
     */
    export type HealthCheckResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HealthCheckResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IncidentDefaultArgs instead
     */
    export type IncidentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IncidentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IncidentEventDefaultArgs instead
     */
    export type IncidentEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IncidentEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailConfigDefaultArgs instead
     */
    export type EmailConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SlackConfigDefaultArgs instead
     */
    export type SlackConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SlackConfigDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}